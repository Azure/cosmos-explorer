# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: CI
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
jobs:
  # compile:
  #   runs-on: ubuntu-latest
  #   name: "Compile TypeScript"
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Use Node.js 12.x
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: 12.x
  #     - run: npm ci
  #     - run: npm run compile
  #     - run: npm run compile:strict
  # format:
  #   runs-on: ubuntu-latest
  #   name: "Check Format"
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Use Node.js 12.x
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: 12.x
  #     - run: npm ci
  #     - run: npm run format:check
  # lint:
  #   runs-on: ubuntu-latest
  #   name: "Lint"
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Use Node.js 12.x
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: 12.x
  #     - run: npm ci
  #     - run: npm run lint
  # unittest:
  #   runs-on: ubuntu-latest
  #   name: "Unit Tests"
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Use Node.js 12.x
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: 12.x
  #     - run: npm ci
  #     - run: npm run test
  e2erunner:
    runs-on: ubuntu-latest
    name: "End to End Portal Tests"
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
      - run: |
        # Accept Microsoft public keys
        $ wget -qO - https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
        $ wget -qO - https://packages.microsoft.com/keys/msopentech.asc | sudo apt-key add -

        # Determine OS distro and code name
        $ os_id=$(cat /etc/os-release | grep ^ID= | cut -d '=' -f2)
        $ echo ${os_id}
        $ os_code=$(cat /etc/os-release | grep VERSION_CODENAME | cut -d '=' -f2)
        $ echo ${os_code}

        # Add Azure repos
        $ echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-${os_id}-${os_code}-prod ${os_code} main" | sudo tee /etc/apt/sources.list.d/azure.list
        $ echo "deb [arch=amd64] https://packages.microsoft.com/repos/azurecore ${os_code} main" | sudo tee -a /etc/apt/sources.list.d/azure.list
      - run: npm ci
      - run: npm run test:e2e
        env:
          PORTAL_RUNNER_USERNAME: ${{ secrets.PORTAL_RUNNER_USERNAME }}
          PORTAL_RUNNER_PASSWORD: ${{ secrets.PORTAL_RUNNER_PASSWORD }}
  # build:
  #   runs-on: ubuntu-latest
  #   name: "Build"
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Use Node.js 12.x
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: 12.x
  #     - run: npm ci
  #     - run: npm run build:contracts
  #     - name: Restore Build Cache
  #       uses: actions/cache@v2
  #       with:
  #         path: .cache
  #         key: ${{ runner.os }}-build-cache
  #     - run: npm run pack:prod
  #     - run: cp -r ./Contracts ./dist/contracts
  #     - uses: actions/upload-artifact@v2
  #       with:
  #         name: dist
  #         path: dist/
  # endtoendemulator:
  #   name: "End To End Tests | Emulator | SQL"
  #   runs-on: windows-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: southpolesteve/cosmos-emulator-github-action@v1
  #     - name: Use Node.js 12.x
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: 12.x
  #     - name: Restore Cypress Binary Cache
  #       uses: actions/cache@v2
  #       with:
  #         path: ~/.cache/Cypress
  #         key: ${{ runner.os }}-cypress-binary-cache
  #     - name: End to End Tests
  #       run: |
  #         npm ci
  #         npm start &
  #         npm ci --prefix ./cypress
  #         npm run test:ci --prefix ./cypress -- --spec ./integration/dataexplorer/ci-tests/createDatabase.spec.ts
  #       shell: bash
  #       env:
  #         EMULATOR_ENDPOINT: https://0.0.0.0:8081/
  #         NODE_TLS_REJECT_UNAUTHORIZED: 0
  #         CYPRESS_CACHE_FOLDER: ~/.cache/Cypress
  # endtoendsql:
  #   name: "End To End Tests | SQL"
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Use Node.js 12.x
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: 12.x
  #     - name: Restore Cypress Binary Cache
  #       uses: actions/cache@v2
  #       with:
  #         path: ~/.cache/Cypress
  #         key: ${{ runner.os }}-cypress-binary-cache
  #     - run: npm ci
  #     - name: End to End Tests
  #       run: |
  #         npm start &
  #         cd cypress
  #         npm ci
  #         node cleanup.js
  #         npm run wait-for-server
  #         npx cypress run --browser chrome --headless --spec "./integration/dataexplorer/SQL/*"
  #       shell: bash
  #       env:
  #         NODE_TLS_REJECT_UNAUTHORIZED: 0
  #         CYPRESS_CACHE_FOLDER: ~/.cache/Cypress
  #         CYPRESS_CONNECTION_STRING: ${{ secrets.CONNECTION_STRING_SQL }}
  # endtoendmongo:
  #   name: "End To End Tests | Mongo"
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Use Node.js 12.x
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: 12.x
  #     - name: Restore Cypress Binary Cache
  #       uses: actions/cache@v2
  #       with:
  #         path: ~/.cache/Cypress
  #         key: ${{ runner.os }}-cypress-binary-cache
  #     - name: End to End Tests
  #       run: |
  #         npm ci
  #         npm start &
  #         cd cypress
  #         npm ci
  #         node cleanup.js
  #         npm run wait-for-server
  #         npx cypress run --browser chrome --headless --spec "./integration/dataexplorer/MONGO/*"
  #       shell: bash
  #       env:
  #         NODE_TLS_REJECT_UNAUTHORIZED: 0
  #         CYPRESS_CACHE_FOLDER: ~/.cache/Cypress
  #         CYPRESS_CONNECTION_STRING: ${{ secrets.CONNECTION_STRING_MONGO }}
  # nuget:
  #   name: Publish Nuget
  #   needs: [lint, format, compile, build, unittest, endtoendemulator, endtoendsql, endtoendmongo]
  #   runs-on: ubuntu-latest
  #   env:
  #     NUGET_SOURCE: ${{ secrets.NUGET_SOURCE }}
  #     AZURE_DEVOPS_PAT: ${{ secrets.AZURE_DEVOPS_PAT }}
  #   steps:
  #     - uses: nuget/setup-nuget@v1
  #       with:
  #         nuget-api-key: ${{ secrets.NUGET_API_KEY }}
  #     - name: Download Dist Folder
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: dist
  #     - run: nuget sources add -Name "ADO" -Source "$NUGET_SOURCE" -UserName "GitHub" -Password "$AZURE_DEVOPS_PAT"
  #     - run: nuget pack -Version "2.0.0-github-${GITHUB_SHA}"
  #     - run: nuget push -Source "$NUGET_SOURCE" -ApiKey Az *.nupkg
  #     - uses: actions/upload-artifact@v2
  #       with:
  #         path: "*.nupkg"
  # nugetmpac:
  #   name: Publish Nuget MPAC
  #   needs: [lint, format, compile, build, unittest, endtoendemulator, endtoendsql, endtoendmongo]
  #   runs-on: ubuntu-latest
  #   env:
  #     NUGET_SOURCE: ${{ secrets.NUGET_SOURCE }}
  #     AZURE_DEVOPS_PAT: ${{ secrets.AZURE_DEVOPS_PAT }}
  #   steps:
  #     - uses: nuget/setup-nuget@v1
  #       with:
  #         nuget-api-key: ${{ secrets.NUGET_API_KEY }}
  #     - name: Download Dist Folder
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: dist
  #     - run: sed -i 's/Azure.Cosmos.DB.Data.Explorer/Azure.Cosmos.DB.Data.Explorer.MPAC/g' DataExplorer.nuspec
  #     - run: nuget sources add -Name "ADO" -Source "$NUGET_SOURCE" -UserName "GitHub" -Password "$AZURE_DEVOPS_PAT"
  #     - run: nuget pack -Version "2.0.0-github-${GITHUB_SHA}"
  #     - run: nuget push -Source "$NUGET_SOURCE" -ApiKey Az *.nupkg
  #     - uses: actions/upload-artifact@v2
  #       with:
  #         path: "*.nupkg"
