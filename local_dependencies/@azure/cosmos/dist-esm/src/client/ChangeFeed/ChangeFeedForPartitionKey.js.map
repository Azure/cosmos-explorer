{"version":3,"file":"ChangeFeedForPartitionKey.js","sourceRoot":"","sources":["../../../../src/client/ChangeFeed/ChangeFeedForPartitionKey.ts"],"names":[],"mappings":";AAGA,OAAO,EAAE,0BAA0B,EAAE,MAAM,8BAA8B,CAAC;AAG1E,OAAO,EAAE,SAAS,EAAE,YAAY,EAAE,MAAM,cAAc,CAAC;AACvD,OAAO,EAAyB,aAAa,EAAE,MAAM,eAAe,CAAC;AACrE,OAAO,EAAE,gCAAgC,EAAE,MAAM,oCAAoC,CAAC;AAItF,OAAO,EAAE,yBAAyB,EAAE,eAAe,EAAE,MAAM,yBAAyB,CAAC;AACrF;;;;;GAKG;AACH,MAAM,OAAO,yBAAyB;IAKpC;;OAEG;IACH,YACU,aAA4B,EAC5B,SAAoB,EACpB,UAAkB,EAClB,YAAoB,EACpB,YAA0B,EAC1B,iBAAoD;QALpD,kBAAa,GAAb,aAAa,CAAe;QAC5B,cAAS,GAAT,SAAS,CAAW;QACpB,eAAU,GAAV,UAAU,CAAQ;QAClB,iBAAY,GAAZ,YAAY,CAAQ;QACpB,iBAAY,GAAZ,YAAY,CAAc;QAC1B,sBAAiB,GAAjB,iBAAiB,CAAmC;QAE5D,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC,iBAAiB;YAC1D,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,iBAAiB,CAAC;YACjD,CAAC,CAAC,SAAS,CAAC;QACd,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;QAE5B,IAAI,iBAAiB,CAAC,SAAS,EAAE;YAC/B,IAAI,CAAC,SAAS,GAAG,iBAAiB,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC;SAC5D;IACH,CAAC;IAEO,KAAK,CAAC,mBAAmB,CAAC,cAAsC;QACtE,MAAM,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;QAC1C,IAAI,IAAI,CAAC,iBAAiB,EAAE;YAC1B,IAAI,CAAC,IAAI,CAAC,qCAAqC,EAAE,EAAE;gBACjD,MAAM,IAAI,aAAa,CAAC,+DAA+D,CAAC,CAAC;aAC1F;SACF;aAAM;YACL,IAAI,CAAC,iBAAiB,GAAG,IAAI,gCAAgC,CAC3D,IAAI,CAAC,GAAG,EACR,IAAI,CAAC,YAAY,EACjB,EAAE,CACH,CAAC;SACH;QAED,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;IAC7B,CAAC;IAEO,qCAAqC;QAC3C,IAAI,IAAI,CAAC,iBAAiB,CAAC,GAAG,KAAK,IAAI,CAAC,GAAG,EAAE;YAC3C,OAAO,KAAK,CAAC;SACd;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEO,KAAK,CAAC,cAAc,CAAC,cAAsC;QACjE,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;QACvE,IAAI,CAAC,GAAG,GAAG,QAAQ,CAAC,IAAI,CAAC;IAC3B,CAAC;IAED;;OAEG;IACH,IAAI,cAAc;QAChB,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACW,gBAAgB;;YAC5B,GAAG;gBACD,MAAM,MAAM,GAAG,cAAM,IAAI,CAAC,QAAQ,EAAE,CAAA,CAAC;gBACrC,oBAAM,MAAM,CAAA,CAAC;aACd,QAAQ,IAAI,CAAC,cAAc,EAAE;QAChC,CAAC;KAAA;IAED;;OAEG;IACI,KAAK,CAAC,QAAQ;QACnB,OAAO,eAAe,CAAC,KAAK,EAAE,cAAsC,EAAE,EAAE;YACtE,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;gBACxB,MAAM,IAAI,CAAC,mBAAmB,CAAC,cAAc,CAAC,CAAC;aAChD;YACD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;YACpD,OAAO,MAAM,CAAC;QAChB,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IACzB,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,SAAS,CACrB,cAAsC;QAEtC,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;QAC5D,IAAI,CAAC,iBAAiB,CAAC,YAAY,GAAG,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACnF,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC,SAAS,CACxE,IAAI,CAAC,iBAAiB,CACvB,CAAC;QACF,OAAO,QAAQ,CAAC;IAClB,CAAC;IAEO,KAAK,CAAC,eAAe,CAC3B,cAAsC;QAEtC,MAAM,WAAW,GAAgB,EAAE,cAAc,EAAE,EAAE,EAAE,kBAAkB,EAAE,IAAI,EAAE,CAAC;QAElF,IAAI,OAAO,IAAI,CAAC,iBAAiB,CAAC,YAAY,KAAK,QAAQ,EAAE;YAC3D,WAAW,CAAC,YAAY,GAAG,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC;SAChE;QAED,IAAI,IAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE;YACvC,WAAW,CAAC,YAAY,GAAG,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC;SAChE;QAED,MAAM,YAAY,GAAG,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC;QACzD,IAAI,YAAY,EAAE;YAChB,WAAW,CAAC,eAAe,GAAG;gBAC5B,IAAI,EAAE,SAAS,CAAC,WAAW,CAAC,WAAW;gBACvC,SAAS,EAAE,YAAY;aACxB,CAAC;SACH;QAED,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,WAAW,CAAC,cAAc,CAAC,SAAS,CAAC,WAAW,CAAC,eAAe,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC;SACpF;QAED,MAAM,QAAQ,GAAkC,MAAO,IAAI,CAAC,aAAa,CAAC,SAAS,CAAI;YACrF,IAAI,EAAE,IAAI,CAAC,YAAY;YACvB,YAAY,EAAE,YAAY,CAAC,IAAI;YAC/B,UAAU,EAAE,IAAI,CAAC,UAAU;YAC3B,QAAQ,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC;YACtD,cAAc;YACd,KAAK,EAAE,SAAS;YAChB,OAAO,EAAE,WAAW;YACpB,YAAY,EAAE,IAAI,CAAC,YAAY;SAChC,CAAkB,CAAC;QAEpB,OAAO,IAAI,0BAA0B,CACnC,QAAQ,CAAC,MAAM,EACf,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAC5C,QAAQ,CAAC,IAAI,EACb,QAAQ,CAAC,OAAO,EAChB,yBAAyB,EAAE,CAC5B,CAAC;IACJ,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { InternalChangeFeedIteratorOptions } from \"./InternalChangeFeedOptions\";\nimport { ChangeFeedIteratorResponse } from \"./ChangeFeedIteratorResponse\";\nimport { Container, Resource } from \"../../client\";\nimport { ClientContext } from \"../../ClientContext\";\nimport { Constants, ResourceType } from \"../../common\";\nimport { FeedOptions, Response, ErrorResponse } from \"../../request\";\nimport { ContinuationTokenForPartitionKey } from \"./ContinuationTokenForPartitionKey\";\nimport { ChangeFeedPullModelIterator } from \"./ChangeFeedPullModelIterator\";\nimport { PartitionKey } from \"../../documents\";\nimport { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport { getEmptyCosmosDiagnostics, withDiagnostics } from \"../../utils/diagnostics\";\n/**\n * @hidden\n * Provides iterator for change feed for one partition key.\n *\n * Use `Items.getChangeFeedIterator()` to get an instance of the iterator.\n */\nexport class ChangeFeedForPartitionKey<T> implements ChangeFeedPullModelIterator<T> {\n  private continuationToken: ContinuationTokenForPartitionKey;\n  private startTime: string;\n  private rId: string;\n  private isInstantiated: boolean;\n  /**\n   * @internal\n   */\n  constructor(\n    private clientContext: ClientContext,\n    private container: Container,\n    private resourceId: string,\n    private resourceLink: string,\n    private partitionKey: PartitionKey,\n    private changeFeedOptions: InternalChangeFeedIteratorOptions,\n  ) {\n    this.continuationToken = changeFeedOptions.continuationToken\n      ? JSON.parse(changeFeedOptions.continuationToken)\n      : undefined;\n    this.isInstantiated = false;\n\n    if (changeFeedOptions.startTime) {\n      this.startTime = changeFeedOptions.startTime.toUTCString();\n    }\n  }\n\n  private async instantiateIterator(diagnosticNode: DiagnosticNodeInternal): Promise<void> {\n    await this.setIteratorRid(diagnosticNode);\n    if (this.continuationToken) {\n      if (!this.continuationTokenRidMatchContainerRid()) {\n        throw new ErrorResponse(\"The continuation is not for the current container definition.\");\n      }\n    } else {\n      this.continuationToken = new ContinuationTokenForPartitionKey(\n        this.rId,\n        this.partitionKey,\n        \"\",\n      );\n    }\n\n    this.isInstantiated = true;\n  }\n\n  private continuationTokenRidMatchContainerRid(): boolean {\n    if (this.continuationToken.rid !== this.rId) {\n      return false;\n    }\n    return true;\n  }\n\n  private async setIteratorRid(diagnosticNode: DiagnosticNodeInternal): Promise<void> {\n    const { resource } = await this.container.readInternal(diagnosticNode);\n    this.rId = resource._rid;\n  }\n\n  /**\n   * Change feed is an infinite feed. hasMoreResults is always true.\n   */\n  get hasMoreResults(): boolean {\n    return true;\n  }\n\n  /**\n   * Gets an async iterator which will yield change feed results.\n   */\n  public async *getAsyncIterator(): AsyncIterable<ChangeFeedIteratorResponse<Array<T & Resource>>> {\n    do {\n      const result = await this.readNext();\n      yield result;\n    } while (this.hasMoreResults);\n  }\n\n  /**\n   * Returns the result of change feed from Azure Cosmos DB.\n   */\n  public async readNext(): Promise<ChangeFeedIteratorResponse<Array<T & Resource>>> {\n    return withDiagnostics(async (diagnosticNode: DiagnosticNodeInternal) => {\n      if (!this.isInstantiated) {\n        await this.instantiateIterator(diagnosticNode);\n      }\n      const result = await this.fetchNext(diagnosticNode);\n      return result;\n    }, this.clientContext);\n  }\n\n  /**\n   * Read feed and retrieves the next set of results in Azure Cosmos DB.\n   */\n  private async fetchNext(\n    diagnosticNode: DiagnosticNodeInternal,\n  ): Promise<ChangeFeedIteratorResponse<Array<T & Resource>>> {\n    const response = await this.getFeedResponse(diagnosticNode);\n    this.continuationToken.Continuation = response.headers[Constants.HttpHeaders.ETag];\n    response.headers[Constants.HttpHeaders.ContinuationToken] = JSON.stringify(\n      this.continuationToken,\n    );\n    return response;\n  }\n\n  private async getFeedResponse(\n    diagnosticNode: DiagnosticNodeInternal,\n  ): Promise<ChangeFeedIteratorResponse<Array<T & Resource>>> {\n    const feedOptions: FeedOptions = { initialHeaders: {}, useIncrementalFeed: true };\n\n    if (typeof this.changeFeedOptions.maxItemCount === \"number\") {\n      feedOptions.maxItemCount = this.changeFeedOptions.maxItemCount;\n    }\n\n    if (this.changeFeedOptions.sessionToken) {\n      feedOptions.sessionToken = this.changeFeedOptions.sessionToken;\n    }\n\n    const continuation = this.continuationToken.Continuation;\n    if (continuation) {\n      feedOptions.accessCondition = {\n        type: Constants.HttpHeaders.IfNoneMatch,\n        condition: continuation,\n      };\n    }\n\n    if (this.startTime) {\n      feedOptions.initialHeaders[Constants.HttpHeaders.IfModifiedSince] = this.startTime;\n    }\n\n    const response: Response<Array<T & Resource>> = await (this.clientContext.queryFeed<T>({\n      path: this.resourceLink,\n      resourceType: ResourceType.item,\n      resourceId: this.resourceId,\n      resultFn: (result) => (result ? result.Documents : []),\n      diagnosticNode,\n      query: undefined,\n      options: feedOptions,\n      partitionKey: this.partitionKey,\n    }) as Promise<any>);\n\n    return new ChangeFeedIteratorResponse(\n      response.result,\n      response.result ? response.result.length : 0,\n      response.code,\n      response.headers,\n      getEmptyCosmosDiagnostics(),\n    );\n  }\n}\n"]}