{"version":3,"file":"CosmosDiagnosticsContext.js","sourceRoot":"","sources":["../../../src/diagnostics/CosmosDiagnosticsContext.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  ClientSideRequestStatistics,\n  FailedRequestAttemptDiagnostic,\n  GatewayStatistics,\n  MetadataLookUpDiagnostic,\n  MetadataLookUpType,\n} from \"../CosmosDiagnostics\";\nimport { getCurrentTimestampInMs } from \"../utils/time\";\n\n/**\n * @hidden\n * Internal class to hold CosmosDiagnostic aggregate information all through the lifecycle of a request.\n * This object gathers diagnostic information throughout Client operation which may span across multiple\n * Server call, retries etc.\n * Functions - recordFailedAttempt, recordMetaDataQuery, recordEndpointContactEvent are used to ingest\n * data into the context. At the end of operation, getDiagnostics() is used to\n * get final CosmosDiagnostic object.\n */\nexport class CosmosDiagnosticContext {\n  private requestStartTimeUTCinMs: number;\n  private failedAttempts: FailedRequestAttemptDiagnostic[] = [];\n  private metadataLookups: MetadataLookUpDiagnostic[] = [];\n  private gaterwayStatistics: GatewayStatistics[] = [];\n  public locationEndpointsContacted: Set<string> = new Set();\n\n  public constructor() {\n    this.requestStartTimeUTCinMs = getCurrentTimestampInMs();\n  }\n\n  public recordFailedAttempt(\n    gaterwayStatistics: GatewayStatistics,\n    retryAttemptNumber: number,\n  ): void {\n    const attempt: FailedRequestAttemptDiagnostic = {\n      attemptNumber: retryAttemptNumber,\n      startTimeUTCInMs: gaterwayStatistics.startTimeUTCInMs,\n      durationInMs: gaterwayStatistics.durationInMs,\n      statusCode: gaterwayStatistics.statusCode,\n      substatusCode: gaterwayStatistics.subStatusCode,\n      requestPayloadLengthInBytes: gaterwayStatistics.requestPayloadLengthInBytes,\n      responsePayloadLengthInBytes: gaterwayStatistics.responsePayloadLengthInBytes,\n      activityId: gaterwayStatistics.activityId,\n      operationType: gaterwayStatistics.operationType,\n      resourceType: gaterwayStatistics.resourceType,\n    };\n    this.failedAttempts.push(attempt);\n  }\n\n  public recordNetworkCall(gaterwayStatistics: GatewayStatistics): void {\n    this.gaterwayStatistics.push(gaterwayStatistics);\n  }\n\n  /**\n   * Merge given DiagnosticContext to current node's DiagnosticContext, Treating GatewayRequests of\n   * given DiagnosticContext, as metadata requests.\n   */\n  public mergeDiagnostics(\n    childDiagnostics: CosmosDiagnosticContext,\n    metadataType: MetadataLookUpType,\n  ): void {\n    // Copy Location endpoints contacted.\n    childDiagnostics.locationEndpointsContacted.forEach((endpoint) =>\n      this.locationEndpointsContacted.add(endpoint),\n    );\n\n    // Copy child nodes's GatewayStatistics to parent's metadata lookups.\n    childDiagnostics.gaterwayStatistics.forEach((gateway) =>\n      this.metadataLookups.push({\n        activityId: gateway.activityId,\n        requestPayloadLengthInBytes: gateway.requestPayloadLengthInBytes,\n        responsePayloadLengthInBytes: gateway.responsePayloadLengthInBytes,\n        startTimeUTCInMs: gateway.startTimeUTCInMs,\n        operationType: gateway.operationType,\n        resourceType: gateway.resourceType,\n        durationInMs: gateway.durationInMs,\n        metaDataType: metadataType,\n      }),\n    );\n\n    // Copy child nodes's metadata lookups to parent's metadata lookups.\n    childDiagnostics.metadataLookups.forEach((lookup) => this.metadataLookups.push(lookup));\n\n    // Copy child nodes's failed attempts to parent's failed attempts.\n    childDiagnostics.failedAttempts.forEach((lookup) => this.failedAttempts.push(lookup));\n  }\n\n  public getClientSideStats(\n    endTimeUTCInMs: number = getCurrentTimestampInMs(),\n  ): ClientSideRequestStatistics {\n    return {\n      requestStartTimeUTCInMs: this.requestStartTimeUTCinMs,\n      requestDurationInMs: endTimeUTCInMs - this.requestStartTimeUTCinMs,\n      totalRequestPayloadLengthInBytes: this.getTotalRequestPayloadLength(),\n      totalResponsePayloadLengthInBytes: this.getTotalResponsePayloadLength(),\n      locationEndpointsContacted: [...this.locationEndpointsContacted.values()],\n      metadataDiagnostics: {\n        metadataLookups: [...this.metadataLookups],\n      },\n      retryDiagnostics: {\n        failedAttempts: [...this.failedAttempts],\n      },\n      gatewayStatistics: this.gaterwayStatistics,\n    };\n  }\n\n  public getTotalRequestPayloadLength(): number {\n    let totalRequestPayloadLength = 0;\n    this.gaterwayStatistics.forEach(\n      (req) => (totalRequestPayloadLength += req.requestPayloadLengthInBytes),\n    );\n    this.metadataLookups.forEach(\n      (req) => (totalRequestPayloadLength += req.requestPayloadLengthInBytes),\n    );\n    this.failedAttempts.forEach(\n      (req) => (totalRequestPayloadLength += req.requestPayloadLengthInBytes),\n    );\n    return totalRequestPayloadLength;\n  }\n\n  public getTotalResponsePayloadLength(): number {\n    let totalResponsePayloadLength = 0;\n    this.gaterwayStatistics.forEach(\n      (req) => (totalResponsePayloadLength += req.responsePayloadLengthInBytes),\n    );\n    this.metadataLookups.forEach(\n      (req) => (totalResponsePayloadLength += req.responsePayloadLengthInBytes),\n    );\n    this.failedAttempts.forEach(\n      (req) => (totalResponsePayloadLength += req.responsePayloadLengthInBytes),\n    );\n    return totalResponsePayloadLength;\n  }\n\n  public recordEndpointResolution(location: string): void {\n    this.locationEndpointsContacted.add(location);\n  }\n}\n"]}