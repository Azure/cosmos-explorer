{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/diagnostics/index.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAE,SAAS,EAAE,MAAM,WAAW,CAAC;AACtC,OAAO,EAAE,gBAAgB,EAAE,MAAM,kBAAkB,CAAC;AACpD,OAAO,EAAE,uBAAuB,EAAE,MAAM,2BAA2B,CAAC;AAEpE,cAAc,oBAAoB,CAAC;AACnC,cAAc,uBAAuB,CAAC;AAEtC,MAAM,CAAC,MAAM,2BAA2B,GAAG,uBAAuB,CAAC,IAAI,CAAC;AAExE,MAAM,sBAAsB,GAC1B,CAAC,OAAO,OAAO,KAAK,WAAW;IAC7B,OAAO,CAAC,GAAG;IACX,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,iCAAiC,CAAC,CAAC;IAC3D,SAAS,CAAC;AAEZ,MAAM,+BAA+B,GAAG,MAAM,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CACvF,CAAC,CAAC,QAAQ,EAAE,CACb,CAAC;AAEF,IAAI,qBAA0D,CAAC;AAE/D,IAAI,gBAAgB,CAAC,sBAAsB,CAAC,EAAE;IAC5C,iGAAiG;IACjG,IAAI,uBAAuB,CAAC,sBAAsB,CAAC,EAAE;QACnD,kBAAkB,CAAC,sBAAiD,CAAC,CAAC;KACvE;SAAM;QACL,OAAO,CAAC,KAAK,CACX,GACE,SAAS,CAAC,iCACZ,qCAAqC,sBAAsB,qEAAqE,+BAA+B,CAAC,IAAI,CAClK,IAAI,CACL,GAAG,CACL,CAAC;KACH;CACF;AAED,MAAM,UAAU,kBAAkB,CAAC,KAA+B;IAChE,IAAI,KAAK,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,EAAE;QAC5C,MAAM,IAAI,KAAK,CACb,6BAA6B,KAAK,yBAAyB,+BAA+B,CAAC,IAAI,CAC7F,GAAG,CACJ,EAAE,CACJ,CAAC;KACH;IACD,qBAAqB,GAAG,KAAK,CAAC;AAChC,CAAC;AAED,MAAM,UAAU,iCAAiC;IAC/C,OAAO,qBAAqB,CAAC;AAC/B,CAAC;AAED,SAAS,uBAAuB,CAC9B,eAAuB;IAEvB,OAAO,+BAA+B,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;AACnE,CAAC;AAED,MAAM,UAAU,wBAAwB,CACtC,+BAAwD,EACxD,8BAAuD;IAEvD,MAAM,8BAA8B,GAClC,8BAA8B,aAA9B,8BAA8B,cAA9B,8BAA8B,GAAI,+BAA+B,CAAC,CAAC,2DAA2D;IAChI,OAAO,8BAA8B,aAA9B,8BAA8B,cAA9B,8BAA8B,GAAI,2BAA2B,CAAC,CAAC,qEAAqE;AAC7I,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Constants } from \"../common\";\nimport { isNonEmptyString } from \"../utils/strings\";\nimport { CosmosDbDiagnosticLevel } from \"./CosmosDbDiagnosticLevel\";\n\nexport * from \"./DiagnosticWriter\";\nexport * from \"./DiagnosticFormatter\";\n\nexport const DefaultDiagnosticLevelValue = CosmosDbDiagnosticLevel.info;\n\nconst diagnosticLevelFromEnv =\n  (typeof process !== \"undefined\" &&\n    process.env &&\n    process.env[Constants.CosmosDbDiagnosticLevelEnvVarName]) ||\n  undefined;\n\nconst acceptableDiagnosticLevelValues = Object.values(CosmosDbDiagnosticLevel).map((x) =>\n  x.toString(),\n);\n\nlet cosmosDiagnosticLevel: CosmosDbDiagnosticLevel | undefined;\n\nif (isNonEmptyString(diagnosticLevelFromEnv)) {\n  // avoid calling setDiagnosticLevel because we don't want a mis-set environment variable to crash\n  if (isCosmosDiagnosticLevel(diagnosticLevelFromEnv)) {\n    setDiagnosticLevel(diagnosticLevelFromEnv as CosmosDbDiagnosticLevel);\n  } else {\n    console.error(\n      `${\n        Constants.CosmosDbDiagnosticLevelEnvVarName\n      } set to unknown diagnostic level '${diagnosticLevelFromEnv}'; Setting Cosmos Db diagnostic level to info. Acceptable values: ${acceptableDiagnosticLevelValues.join(\n        \", \",\n      )}.`,\n    );\n  }\n}\n\nexport function setDiagnosticLevel(level?: CosmosDbDiagnosticLevel): void {\n  if (level && !isCosmosDiagnosticLevel(level)) {\n    throw new Error(\n      `Unknown diagnostic level '${level}'. Acceptable values: ${acceptableDiagnosticLevelValues.join(\n        \",\",\n      )}`,\n    );\n  }\n  cosmosDiagnosticLevel = level;\n}\n\nexport function getDiagnosticLevelFromEnvironment(): CosmosDbDiagnosticLevel | undefined {\n  return cosmosDiagnosticLevel;\n}\n\nfunction isCosmosDiagnosticLevel(\n  diagnosticLevel: string,\n): diagnosticLevel is CosmosDbDiagnosticLevel {\n  return acceptableDiagnosticLevelValues.includes(diagnosticLevel);\n}\n\nexport function determineDiagnosticLevel(\n  diagnosticLevelFromClientConfig: CosmosDbDiagnosticLevel,\n  diagnosticLevelFromEnvironment: CosmosDbDiagnosticLevel,\n): CosmosDbDiagnosticLevel {\n  const diagnosticLevelFromEnvOrClient =\n    diagnosticLevelFromEnvironment ?? diagnosticLevelFromClientConfig; // Diagnostic Setting from environment gets first priority.\n  return diagnosticLevelFromEnvOrClient ?? DefaultDiagnosticLevelValue; // Diagnostic Setting supplied in Client config gets second priority.\n}\n"]}