{"version":3,"file":"extractPartitionKey.js","sourceRoot":"","sources":["../../src/extractPartitionKey.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAClC,OAAO,EAAe,kBAAkB,EAAE,MAAM,eAAe,CAAC;AAChE,OAAO,EAAE,SAAS,EAAE,MAAM,UAAU,CAAC;AACrC,OAAO,EACL,uBAAuB,EACvB,uBAAuB,GAIxB,MAAM,aAAa,CAAC;AACrB,OAAO,EAAE,0BAA0B,EAAE,MAAM,wBAAwB,CAAC;AAEpE,MAAM,MAAM,GAAgB,kBAAkB,CAAC,qBAAqB,CAAC,CAAC;AAEtE;;;;;;;;GAQG;AACH,MAAM,UAAU,oBAAoB,CAClC,QAAiB,EACjB,sBAA+C;IAE/C,IACE,sBAAsB;QACtB,sBAAsB,CAAC,KAAK;QAC5B,sBAAsB,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EACvC;QACA,IAAI,sBAAsB,CAAC,SAAS,KAAK,IAAI,EAAE;YAC7C,OAAO,EAAE,CAAC;SACX;QAED,IACE,sBAAsB,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC;YACzC,sBAAsB,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,0BAA0B,EAC9D;YACA,OAAO,CAAC,mBAAmB,CAAC,0BAA0B,EAAE,QAAQ,CAAC,CAAC,CAAC;SACpE;QAED,MAAM,aAAa,GAAiC,EAAE,CAAC;QACvD,sBAAsB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAY,EAAE,EAAE;YACpD,MAAM,GAAG,GAAG,mBAAmB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YAChD,IAAI,GAAG,KAAK,SAAS,EAAE;gBACrB,MAAM,CAAC,OAAO,CAAC,iCAAiC,CAAC,CAAC;gBAClD,OAAO,SAAS,CAAC;aAClB;YACD,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC1B,CAAC,CAAC,CAAC;QACH,OAAO,aAAa,CAAC;KACtB;IACD,MAAM,CAAC,KAAK,CAAC,4CAA4C,CAAC,CAAC;IAC3D,OAAO,SAAS,CAAC;AACnB,CAAC;AAED,SAAS,mBAAmB,CAAC,IAAY,EAAE,GAAY;IACrD,MAAM,SAAS,GAAa,SAAS,CAAC,IAAI,CAAC,CAAC;IAC5C,KAAK,MAAM,IAAI,IAAI,SAAS,EAAE;QAC5B,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,GAAG,KAAK,IAAI,IAAI,IAAI,IAAI,GAAG,EAAE;YAC1D,GAAG,GAAI,GAA+B,CAAC,IAAI,CAAC,CAAC;SAC9C;aAAM;YACL,GAAG,GAAG,SAAS,CAAC;YAChB,MAAM;SACP;KACF;IACD,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,OAAO,GAAG,KAAK,SAAS,EAAE;QAClF,OAAO,GAAG,CAAC;KACZ;SAAM,IAAI,GAAG,KAAK,uBAAuB,EAAE;QAC1C,OAAO,uBAAuB,CAAC;KAChC;SAAM,IAAI,GAAG,KAAK,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,IAAI,CAAC,SAAS,CAAC,uBAAuB,CAAC,EAAE;QAC/F,OAAO,uBAAuB,CAAC;KAChC;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,qBAAqB,CACnC,sBAA8C;IAE9C,IAAI,sBAAsB,CAAC,SAAS,KAAK,IAAI,EAAE;QAC7C,OAAO,EAAE,CAAC;KACX;SAAM;QACL,OAAO,sBAAsB,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,uBAAuB,CAAC,CAAC;KACxE;AACH,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { AzureLogger, createClientLogger } from \"@azure/logger\";\nimport { parsePath } from \"./common\";\nimport {\n  NonePartitionKeyLiteral,\n  NullPartitionKeyLiteral,\n  PartitionKeyDefinition,\n  PartitionKeyInternal,\n  PrimitivePartitionKeyValue,\n} from \"./documents\";\nimport { DEFAULT_PARTITION_KEY_PATH } from \"./common/partitionKeys\";\n\nconst logger: AzureLogger = createClientLogger(\"extractPartitionKey\");\n\n/**\n * Function to extract PartitionKey based on {@link PartitionKeyDefinition}\n * from an object.\n * Retuns\n * 1. PartitionKeyInternal[] if extraction is successful.\n * 2. undefined if either {@link partitionKeyDefinition} is not well formed\n * or an unsupported partitionkey type is encountered.\n * @hidden\n */\nexport function extractPartitionKeys(\n  document: unknown,\n  partitionKeyDefinition?: PartitionKeyDefinition,\n): PartitionKeyInternal | undefined {\n  if (\n    partitionKeyDefinition &&\n    partitionKeyDefinition.paths &&\n    partitionKeyDefinition.paths.length > 0\n  ) {\n    if (partitionKeyDefinition.systemKey === true) {\n      return [];\n    }\n\n    if (\n      partitionKeyDefinition.paths.length === 1 &&\n      partitionKeyDefinition.paths[0] === DEFAULT_PARTITION_KEY_PATH\n    ) {\n      return [extractPartitionKey(DEFAULT_PARTITION_KEY_PATH, document)];\n    }\n\n    const partitionKeys: PrimitivePartitionKeyValue[] = [];\n    partitionKeyDefinition.paths.forEach((path: string) => {\n      const obj = extractPartitionKey(path, document);\n      if (obj === undefined) {\n        logger.warning(\"Unsupported PartitionKey found.\");\n        return undefined;\n      }\n      partitionKeys.push(obj);\n    });\n    return partitionKeys;\n  }\n  logger.error(\"Unexpected Partition Key Definition Found.\");\n  return undefined;\n}\n\nfunction extractPartitionKey(path: string, obj: unknown): any {\n  const pathParts: string[] = parsePath(path);\n  for (const part of pathParts) {\n    if (typeof obj === \"object\" && obj !== null && part in obj) {\n      obj = (obj as Record<string, unknown>)[part];\n    } else {\n      obj = undefined;\n      break;\n    }\n  }\n  if (typeof obj === \"string\" || typeof obj === \"number\" || typeof obj === \"boolean\") {\n    return obj;\n  } else if (obj === NullPartitionKeyLiteral) {\n    return NullPartitionKeyLiteral;\n  } else if (obj === undefined || JSON.stringify(obj) === JSON.stringify(NonePartitionKeyLiteral)) {\n    return NonePartitionKeyLiteral;\n  }\n  return undefined;\n}\n\n/**\n * @hidden\n */\nexport function undefinedPartitionKey(\n  partitionKeyDefinition: PartitionKeyDefinition,\n): PartitionKeyInternal {\n  if (partitionKeyDefinition.systemKey === true) {\n    return [];\n  } else {\n    return partitionKeyDefinition.paths.map(() => NonePartitionKeyLiteral);\n  }\n}\n"]}