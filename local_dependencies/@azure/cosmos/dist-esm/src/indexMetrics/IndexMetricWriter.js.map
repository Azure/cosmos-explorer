{"version":3,"file":"IndexMetricWriter.js","sourceRoot":"","sources":["../../../src/indexMetrics/IndexMetricWriter.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport Constants from \"./Constants\";\nimport { CompositeIndexUtilizationEntity } from \"./CompositeIndexUtilizationEntity\";\nimport { IndexUtilizationInfo } from \"./IndexUtilizationInfo\";\nimport { SingleIndexUtilizationEntity } from \"./SingleIndexUtilizationEntity\";\n\nexport class IndexMetricWriter {\n  public writeIndexMetrics(indexUtilizationInfo: IndexUtilizationInfo): string {\n    let result = \"\";\n    result = this.writeBeforeIndexUtilizationInfo(result);\n    result = this.writeIndexUtilizationInfo(result, indexUtilizationInfo);\n    result = this.writeAfterIndexUtilizationInfo(result);\n    return result;\n  }\n\n  protected writeBeforeIndexUtilizationInfo(result: string): string {\n    result = this.appendNewlineToResult(result);\n    result = this.appendHeaderToResult(result, Constants.IndexUtilizationInfo, 0);\n    return result;\n  }\n\n  protected writeIndexUtilizationInfo(\n    result: string,\n    indexUtilizationInfo: IndexUtilizationInfo,\n  ): string {\n    result = this.appendHeaderToResult(result, Constants.UtilizedSingleIndexes, 1);\n\n    for (const indexUtilizationEntity of indexUtilizationInfo.UtilizedSingleIndexes) {\n      result = this.writeSingleIndexUtilizationEntity(result, indexUtilizationEntity);\n    }\n    result = this.appendHeaderToResult(result, Constants.PotentialSingleIndexes, 1);\n\n    for (const indexUtilizationEntity of indexUtilizationInfo.PotentialSingleIndexes) {\n      result = this.writeSingleIndexUtilizationEntity(result, indexUtilizationEntity);\n    }\n\n    result = this.appendHeaderToResult(result, Constants.UtilizedCompositeIndexes, 1);\n\n    for (const indexUtilizationEntity of indexUtilizationInfo.UtilizedCompositeIndexes) {\n      result = this.writeCompositeIndexUtilizationEntity(result, indexUtilizationEntity);\n    }\n\n    result = this.appendHeaderToResult(result, Constants.PotentialCompositeIndexes, 1);\n\n    for (const indexUtilizationEntity of indexUtilizationInfo.PotentialCompositeIndexes) {\n      result = this.writeCompositeIndexUtilizationEntity(result, indexUtilizationEntity);\n    }\n    return result;\n  }\n\n  protected writeAfterIndexUtilizationInfo(result: string): string {\n    return result;\n  }\n\n  private writeSingleIndexUtilizationEntity(\n    result: string,\n    indexUtilizationEntity: SingleIndexUtilizationEntity,\n  ): string {\n    result = this.appendHeaderToResult(\n      result,\n      `${Constants.IndexExpression}: ${indexUtilizationEntity.IndexSpec}`,\n      2,\n    );\n    result = this.appendHeaderToResult(\n      result,\n      `${Constants.IndexImpactScore}: ${indexUtilizationEntity.IndexImpactScore}`,\n      2,\n    );\n    result = this.appendHeaderToResult(result, Constants.IndexUtilizationSeparator, 2);\n    return result;\n  }\n\n  private writeCompositeIndexUtilizationEntity(\n    result: string,\n    indexUtilizationEntity: CompositeIndexUtilizationEntity,\n  ): string {\n    result = this.appendHeaderToResult(\n      result,\n      `${Constants.IndexExpression}: ${indexUtilizationEntity.IndexSpecs.join(\", \")}`,\n      2,\n    );\n    result = this.appendHeaderToResult(\n      result,\n      `${Constants.IndexImpactScore}: ${indexUtilizationEntity.IndexImpactScore}`,\n      2,\n    );\n    result = this.appendHeaderToResult(result, Constants.IndexUtilizationSeparator, 2);\n    return result;\n  }\n\n  private appendNewlineToResult(result: string): string {\n    return this.appendHeaderToResult(result, \"\", 0);\n  }\n\n  private appendHeaderToResult(result: string, headerTitle: string, indentLevel: number): string {\n    const Indent = \"  \";\n    const header = `${Indent.repeat(indentLevel)}${headerTitle}\\n`;\n    result += header;\n    return result;\n  }\n}\n"]}