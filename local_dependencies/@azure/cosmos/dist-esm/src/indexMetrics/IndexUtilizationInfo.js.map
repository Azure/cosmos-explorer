{"version":3,"file":"IndexUtilizationInfo.js","sourceRoot":"","sources":["../../../src/indexMetrics/IndexUtilizationInfo.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAIlC,MAAM,OAAO,oBAAoB;IAG/B,YACkB,qBAAqD,EACrD,sBAAsD,EACtD,wBAA2D,EAC3D,yBAA4D;QAH5D,0BAAqB,GAArB,qBAAqB,CAAgC;QACrD,2BAAsB,GAAtB,sBAAsB,CAAgC;QACtD,6BAAwB,GAAxB,wBAAwB,CAAmC;QAC3D,8BAAyB,GAAzB,yBAAyB,CAAmC;IAC3E,CAAC;IAEG,MAAM,CAAC,kCAAkC,CAC9C,eAAuB,EACvB,GAAsC;QAEtC,IAAI,eAAe,IAAI,IAAI,EAAE;YAC3B,GAAG,CAAC,MAAM,GAAG,oBAAoB,CAAC,KAAK,CAAC;YACxC,OAAO,KAAK,CAAC;SACd;QAED,OAAO,oBAAoB,CAAC,4BAA4B,CACtD,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC,QAAQ,EAAE,EACjD,GAAG,CACJ,CAAC;IACJ,CAAC;IAEM,MAAM,CAAC,4BAA4B,CACxC,eAAuB,EACvB,GAAsC;QAEtC,IAAI,eAAe,IAAI,IAAI,EAAE;YAC3B,GAAG,CAAC,MAAM,GAAG,oBAAoB,CAAC,KAAK,CAAC;YACxC,OAAO,KAAK,CAAC;SACd;QAED,IAAI;YACF,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,IAAI,oBAAoB,CAAC,KAAK,CAAC;YACvE,OAAO,IAAI,CAAC;SACb;QAAC,OAAO,KAAK,EAAE;YACd,GAAG,CAAC,MAAM,GAAG,oBAAoB,CAAC,KAAK,CAAC;YACxC,OAAO,KAAK,CAAC;SACd;IACH,CAAC;IAEM,MAAM,CAAC,gBAAgB,CAC5B,eAAuB,EACvB,eAAwB;;QAExB,MAAM,MAAM,GAAsC,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC;QAExE,IAAI,eAAe,EAAE;YACnB,oBAAoB,CAAC,kCAAkC,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC;SAClF;aAAM;YACL,oBAAoB,CAAC,4BAA4B,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC;SAC5E;QAED,OAAO,MAAA,MAAM,CAAC,MAAM,mCAAI,oBAAoB,CAAC,KAAK,CAAC;IACrD,CAAC;;AAvDsB,0BAAK,GAAG,IAAI,oBAAoB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { SingleIndexUtilizationEntity } from \"./SingleIndexUtilizationEntity\";\nimport { CompositeIndexUtilizationEntity } from \"./CompositeIndexUtilizationEntity\";\nexport class IndexUtilizationInfo {\n  public static readonly Empty = new IndexUtilizationInfo([], [], [], []);\n\n  constructor(\n    public readonly UtilizedSingleIndexes: SingleIndexUtilizationEntity[],\n    public readonly PotentialSingleIndexes: SingleIndexUtilizationEntity[],\n    public readonly UtilizedCompositeIndexes: CompositeIndexUtilizationEntity[],\n    public readonly PotentialCompositeIndexes: CompositeIndexUtilizationEntity[],\n  ) {}\n\n  public static tryCreateFromDelimitedBase64String(\n    delimitedString: string,\n    out: { result?: IndexUtilizationInfo },\n  ): boolean {\n    if (delimitedString == null) {\n      out.result = IndexUtilizationInfo.Empty;\n      return false;\n    }\n\n    return IndexUtilizationInfo.tryCreateFromDelimitedString(\n      Buffer.from(delimitedString, \"base64\").toString(),\n      out,\n    );\n  }\n\n  public static tryCreateFromDelimitedString(\n    delimitedString: string,\n    out: { result?: IndexUtilizationInfo },\n  ): boolean {\n    if (delimitedString == null) {\n      out.result = IndexUtilizationInfo.Empty;\n      return false;\n    }\n\n    try {\n      out.result = JSON.parse(delimitedString) || IndexUtilizationInfo.Empty;\n      return true;\n    } catch (error) {\n      out.result = IndexUtilizationInfo.Empty;\n      return false;\n    }\n  }\n\n  public static createFromString(\n    delimitedString: string,\n    isBase64Encoded: boolean,\n  ): IndexUtilizationInfo {\n    const result: { result?: IndexUtilizationInfo } = { result: undefined };\n\n    if (isBase64Encoded) {\n      IndexUtilizationInfo.tryCreateFromDelimitedBase64String(delimitedString, result);\n    } else {\n      IndexUtilizationInfo.tryCreateFromDelimitedString(delimitedString, result);\n    }\n\n    return result.result ?? IndexUtilizationInfo.Empty;\n  }\n}\n"]}