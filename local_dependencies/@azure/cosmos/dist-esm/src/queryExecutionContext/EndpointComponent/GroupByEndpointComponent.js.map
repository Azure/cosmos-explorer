{"version":3,"file":"GroupByEndpointComponent.js","sourceRoot":"","sources":["../../../../src/queryExecutionContext/EndpointComponent/GroupByEndpointComponent.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { QueryOperationOptions, Response } from \"../../request\";\nimport { ExecutionContext } from \"../ExecutionContext\";\nimport { CosmosHeaders } from \"../CosmosHeaders\";\nimport { QueryInfo } from \"../../request/ErrorResponse\";\nimport { hashObject } from \"../../utils/hashObject\";\nimport { Aggregator, createAggregator } from \"../Aggregators\";\nimport { getInitialHeader, mergeHeaders } from \"../headerUtils\";\nimport { emptyGroup, extractAggregateResult } from \"./emptyGroup\";\nimport { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport { RUCapPerOperationExceededErrorCode } from \"../../request/RUCapPerOperationExceededError\";\nimport { RUConsumedManager } from \"../../common\";\n\ninterface GroupByResponse {\n  result: GroupByResult;\n  headers: CosmosHeaders;\n}\n\ninterface GroupByResult {\n  groupByItems: any[];\n  payload: any;\n}\n\n/** @hidden */\nexport class GroupByEndpointComponent implements ExecutionContext {\n  constructor(\n    private executionContext: ExecutionContext,\n    private queryInfo: QueryInfo,\n  ) {}\n\n  private readonly groupings: Map<string, Map<string, Aggregator>> = new Map();\n  private readonly aggregateResultArray: any[] = [];\n  private completed: boolean = false;\n\n  public async nextItem(\n    diagnosticNode: DiagnosticNodeInternal,\n    operationOptions?: QueryOperationOptions,\n    ruConsumedManager?: RUConsumedManager,\n  ): Promise<Response<any>> {\n    // If we have a full result set, begin returning results\n    if (this.aggregateResultArray.length > 0) {\n      return {\n        result: this.aggregateResultArray.pop(),\n        headers: getInitialHeader(),\n      };\n    }\n\n    if (this.completed) {\n      return {\n        result: undefined,\n        headers: getInitialHeader(),\n      };\n    }\n\n    const aggregateHeaders = getInitialHeader();\n    try {\n      while (this.executionContext.hasMoreResults()) {\n        // Grab the next result\n        const { result, headers } = (await this.executionContext.nextItem(\n          diagnosticNode,\n          operationOptions,\n          ruConsumedManager,\n        )) as GroupByResponse;\n        mergeHeaders(aggregateHeaders, headers);\n\n        // If it exists, process it via aggregators\n        if (result) {\n          const group = result.groupByItems ? await hashObject(result.groupByItems) : emptyGroup;\n          const aggregators = this.groupings.get(group);\n          const payload = result.payload;\n          if (aggregators) {\n            // Iterator over all results in the payload\n            Object.keys(payload).map((key) => {\n              // in case the value of a group is null make sure we create a dummy payload with item2==null\n              const effectiveGroupByValue = payload[key]\n                ? payload[key]\n                : new Map().set(\"item2\", null);\n              const aggregateResult = extractAggregateResult(effectiveGroupByValue);\n              aggregators.get(key).aggregate(aggregateResult);\n            });\n          } else {\n            // This is the first time we have seen a grouping. Setup the initial result without aggregate values\n            const grouping = new Map();\n            this.groupings.set(group, grouping);\n            // Iterator over all results in the payload\n            Object.keys(payload).map((key) => {\n              const aggregateType = this.queryInfo.groupByAliasToAggregateType[key];\n              // Create a new aggregator for this specific aggregate field\n              const aggregator = createAggregator(aggregateType);\n              grouping.set(key, aggregator);\n              if (aggregateType) {\n                const aggregateResult = extractAggregateResult(payload[key]);\n                aggregator.aggregate(aggregateResult);\n              } else {\n                aggregator.aggregate(payload[key]);\n              }\n            });\n          }\n        }\n      }\n    } catch (err: any) {\n      if (err.code === RUCapPerOperationExceededErrorCode) {\n        err.fetchedResults = undefined;\n      }\n      throw err;\n    }\n\n    for (const grouping of this.groupings.values()) {\n      const groupResult: any = {};\n      for (const [aggregateKey, aggregator] of grouping.entries()) {\n        groupResult[aggregateKey] = aggregator.getResult();\n      }\n      this.aggregateResultArray.push(groupResult);\n    }\n    this.completed = true;\n    return {\n      result: this.aggregateResultArray.pop(),\n      headers: aggregateHeaders,\n    };\n  }\n\n  public hasMoreResults(): boolean {\n    return this.executionContext.hasMoreResults() || this.aggregateResultArray.length > 0;\n  }\n}\n"]}