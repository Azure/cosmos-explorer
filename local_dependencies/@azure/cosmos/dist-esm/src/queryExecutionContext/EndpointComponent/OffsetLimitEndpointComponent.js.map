{"version":3,"file":"OffsetLimitEndpointComponent.js","sourceRoot":"","sources":["../../../../src/queryExecutionContext/EndpointComponent/OffsetLimitEndpointComponent.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,kCAAkC,EAAE,MAAM,8CAA8C,CAAC;AAElG,OAAO,EAAE,gBAAgB,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAC;AAGhE,cAAc;AACd,MAAM,OAAO,4BAA4B;IACvC,YACU,gBAAkC,EAClC,MAAc,EACd,KAAa;QAFb,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,WAAM,GAAN,MAAM,CAAQ;QACd,UAAK,GAAL,KAAK,CAAQ;IACpB,CAAC;IAEG,KAAK,CAAC,QAAQ,CACnB,cAAsC,EACtC,gBAAwC,EACxC,iBAAqC;QAErC,MAAM,gBAAgB,GAAG,gBAAgB,EAAE,CAAC;QAC5C,IAAI;YACF,OAAO,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;gBACtB,iEAAiE;gBACjE,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CACtD,cAAc,EACd,gBAAgB,EAChB,iBAAiB,CAClB,CAAC;gBACF,IAAI,CAAC,MAAM,EAAE,CAAC;gBACd,YAAY,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;aACzC;YACD,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE;gBAClB,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAC9D,cAAc,EACd,gBAAgB,EAChB,iBAAiB,CAClB,CAAC;gBACF,IAAI,CAAC,KAAK,EAAE,CAAC;gBACb,YAAY,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;gBACxC,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,gBAAgB,EAAE,CAAC;aAC9C;SACF;QAAC,OAAO,GAAG,EAAE;YACZ,IAAI,GAAG,CAAC,IAAI,KAAK,kCAAkC,EAAE;gBACnD,GAAG,CAAC,cAAc,GAAG,SAAS,CAAC;aAChC;YACD,MAAM,GAAG,CAAC;SACX;QACD,iDAAiD;QACjD,OAAO;YACL,MAAM,EAAE,SAAS;YACjB,OAAO,EAAE,gBAAgB,EAAE;SAC5B,CAAC;IACJ,CAAC;IAEM,cAAc;QACnB,OAAO,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,gBAAgB,CAAC,cAAc,EAAE,CAAC;IACvF,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport { QueryOperationOptions, Response } from \"../../request\";\nimport { RUCapPerOperationExceededErrorCode } from \"../../request/RUCapPerOperationExceededError\";\nimport { ExecutionContext } from \"../ExecutionContext\";\nimport { getInitialHeader, mergeHeaders } from \"../headerUtils\";\nimport { RUConsumedManager } from \"../../common\";\n\n/** @hidden */\nexport class OffsetLimitEndpointComponent implements ExecutionContext {\n  constructor(\n    private executionContext: ExecutionContext,\n    private offset: number,\n    private limit: number,\n  ) {}\n\n  public async nextItem(\n    diagnosticNode: DiagnosticNodeInternal,\n    operationOptions?: QueryOperationOptions,\n    ruConsumedManager?: RUConsumedManager,\n  ): Promise<Response<any>> {\n    const aggregateHeaders = getInitialHeader();\n    try {\n      while (this.offset > 0) {\n        // Grab next item but ignore the result. We only need the headers\n        const { headers } = await this.executionContext.nextItem(\n          diagnosticNode,\n          operationOptions,\n          ruConsumedManager,\n        );\n        this.offset--;\n        mergeHeaders(aggregateHeaders, headers);\n      }\n      if (this.limit > 0) {\n        const { result, headers } = await this.executionContext.nextItem(\n          diagnosticNode,\n          operationOptions,\n          ruConsumedManager,\n        );\n        this.limit--;\n        mergeHeaders(aggregateHeaders, headers);\n        return { result, headers: aggregateHeaders };\n      }\n    } catch (err) {\n      if (err.code === RUCapPerOperationExceededErrorCode) {\n        err.fetchedResults = undefined;\n      }\n      throw err;\n    }\n    // If both limit and offset are 0, return nothing\n    return {\n      result: undefined,\n      headers: getInitialHeader(),\n    };\n  }\n\n  public hasMoreResults(): boolean {\n    return (this.offset > 0 || this.limit > 0) && this.executionContext.hasMoreResults();\n  }\n}\n"]}