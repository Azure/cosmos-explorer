{"version":3,"file":"UnorderedDistinctEndpointComponent.js","sourceRoot":"","sources":["../../../../src/queryExecutionContext/EndpointComponent/UnorderedDistinctEndpointComponent.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,UAAU,EAAE,MAAM,wBAAwB,CAAC;AAEpD,OAAO,EAAE,kCAAkC,EAAE,MAAM,8CAA8C,CAAC;AAGlG,cAAc;AACd,MAAM,OAAO,kCAAkC;IAE7C,YAAoB,gBAAkC;QAAlC,qBAAgB,GAAhB,gBAAgB,CAAkB;QACpD,IAAI,CAAC,aAAa,GAAG,IAAI,GAAG,EAAE,CAAC;IACjC,CAAC;IAEM,KAAK,CAAC,QAAQ,CACnB,cAAsC,EACtC,gBAAwC,EACxC,iBAAqC;QAErC,IAAI;YACF,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAC9D,cAAc,EACd,gBAAgB,EAChB,iBAAiB,CAClB,CAAC;YACF,IAAI,MAAM,EAAE;gBACV,MAAM,YAAY,GAAG,MAAM,UAAU,CAAC,MAAM,CAAC,CAAC;gBAC9C,IAAI,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE;oBACxC,OAAO,EAAE,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC;iBACvC;gBACD,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;aACtC;YACD,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC;SAC5B;QAAC,OAAO,GAAG,EAAE;YACZ,IAAI,GAAG,CAAC,IAAI,KAAK,kCAAkC,EAAE;gBACnD,GAAG,CAAC,cAAc,GAAG,SAAS,CAAC;aAChC;YACD,MAAM,GAAG,CAAC;SACX;IACH,CAAC;IAEM,cAAc;QACnB,OAAO,IAAI,CAAC,gBAAgB,CAAC,cAAc,EAAE,CAAC;IAChD,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { QueryOperationOptions, Response } from \"../../request\";\nimport { ExecutionContext } from \"../ExecutionContext\";\nimport { hashObject } from \"../../utils/hashObject\";\nimport { DiagnosticNodeInternal } from \"../../diagnostics/DiagnosticNodeInternal\";\nimport { RUCapPerOperationExceededErrorCode } from \"../../request/RUCapPerOperationExceededError\";\nimport { RUConsumedManager } from \"../../common\";\n\n/** @hidden */\nexport class UnorderedDistinctEndpointComponent implements ExecutionContext {\n  private hashedResults: Set<string>;\n  constructor(private executionContext: ExecutionContext) {\n    this.hashedResults = new Set();\n  }\n\n  public async nextItem(\n    diagnosticNode: DiagnosticNodeInternal,\n    operationOptions?: QueryOperationOptions,\n    ruConsumedManager?: RUConsumedManager,\n  ): Promise<Response<any>> {\n    try {\n      const { headers, result } = await this.executionContext.nextItem(\n        diagnosticNode,\n        operationOptions,\n        ruConsumedManager,\n      );\n      if (result) {\n        const hashedResult = await hashObject(result);\n        if (this.hashedResults.has(hashedResult)) {\n          return { result: undefined, headers };\n        }\n        this.hashedResults.add(hashedResult);\n      }\n      return { result, headers };\n    } catch (err) {\n      if (err.code === RUCapPerOperationExceededErrorCode) {\n        err.fetchedResults = undefined;\n      }\n      throw err;\n    }\n  }\n\n  public hasMoreResults(): boolean {\n    return this.executionContext.hasMoreResults();\n  }\n}\n"]}