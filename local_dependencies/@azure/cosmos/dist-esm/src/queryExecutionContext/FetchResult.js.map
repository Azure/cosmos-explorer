{"version":3,"file":"FetchResult.js","sourceRoot":"","sources":["../../../src/queryExecutionContext/FetchResult.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAClC,cAAc;AACd,MAAM,CAAN,IAAY,eAIX;AAJD,WAAY,eAAe;IACzB,qDAAU,CAAA;IACV,+DAAe,CAAA;IACf,yDAAY,CAAA;AACd,CAAC,EAJW,eAAe,KAAf,eAAe,QAI1B;AAED,cAAc;AACd,MAAM,OAAO,WAAW;IAItB;;;;;;;OAOG;IACH,YAAY,YAAqB,EAAE,KAAc;QAC/C,2BAA2B;QAC3B,IAAI,YAAY,KAAK,SAAS,EAAE;YAC9B,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;YACjC,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC,MAAM,CAAC;SAC/C;aAAM;YACL,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACnB,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC,SAAS,CAAC;SAClD;IACH,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/** @hidden */\nexport enum FetchResultType {\n  \"Done\" = 0,\n  \"Exception\" = 1,\n  \"Result\" = 2,\n}\n\n/** @hidden */\nexport class FetchResult {\n  public feedResponse: any;\n  public fetchResultType: FetchResultType;\n  public error: any;\n  /**\n   * Wraps fetch results for the document producer.\n   * This allows the document producer to buffer exceptions so that actual results don't get flushed during splits.\n   *\n   * @param feedReponse - The response the document producer got back on a successful fetch\n   * @param error - The exception meant to be buffered on an unsuccessful fetch\n   * @hidden\n   */\n  constructor(feedResponse: unknown, error: unknown) {\n    // TODO: feedResponse/error\n    if (feedResponse !== undefined) {\n      this.feedResponse = feedResponse;\n      this.fetchResultType = FetchResultType.Result;\n    } else {\n      this.error = error;\n      this.fetchResultType = FetchResultType.Exception;\n    }\n  }\n}\n"]}