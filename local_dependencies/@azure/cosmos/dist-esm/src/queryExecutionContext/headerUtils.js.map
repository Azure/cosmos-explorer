{"version":3,"file":"headerUtils.js","sourceRoot":"","sources":["../../../src/queryExecutionContext/headerUtils.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { Constants } from \"../common\";\nimport { QueryMetrics } from \"../queryMetrics/queryMetrics\";\n\nexport interface CosmosHeaders {\n  [key: string]: any;\n}\n\n/** @hidden */\n// TODO: docs\nexport function getRequestChargeIfAny(headers: CosmosHeaders | number): number {\n  if (typeof headers === \"number\") {\n    return headers;\n  } else if (typeof headers === \"string\") {\n    return parseFloat(headers);\n  }\n\n  if (headers) {\n    const rc = headers[Constants.HttpHeaders.RequestCharge];\n    if (rc) {\n      return parseFloat(rc as string);\n    } else {\n      return 0;\n    }\n  } else {\n    return 0;\n  }\n}\n\n/**\n * @hidden\n */\nexport function getInitialHeader(): CosmosHeaders {\n  const headers: CosmosHeaders = {};\n  headers[Constants.HttpHeaders.RequestCharge] = 0;\n  headers[Constants.HttpHeaders.QueryMetrics] = {};\n  return headers;\n}\n\n/**\n * @hidden\n */\n// TODO: The name of this method isn't very accurate to what it does\nexport function mergeHeaders(headers: CosmosHeaders, toBeMergedHeaders: CosmosHeaders): void {\n  if (headers[Constants.HttpHeaders.RequestCharge] === undefined) {\n    headers[Constants.HttpHeaders.RequestCharge] = 0;\n  }\n\n  if (headers[Constants.HttpHeaders.QueryMetrics] === undefined) {\n    headers[Constants.HttpHeaders.QueryMetrics] = QueryMetrics.zero;\n  }\n\n  if (!toBeMergedHeaders) {\n    return;\n  }\n\n  headers[Constants.HttpHeaders.RequestCharge] += getRequestChargeIfAny(toBeMergedHeaders);\n  if (toBeMergedHeaders[Constants.HttpHeaders.IsRUPerMinuteUsed]) {\n    headers[Constants.HttpHeaders.IsRUPerMinuteUsed] =\n      toBeMergedHeaders[Constants.HttpHeaders.IsRUPerMinuteUsed];\n  }\n\n  if (Constants.HttpHeaders.QueryMetrics in toBeMergedHeaders) {\n    const headerQueryMetrics = headers[Constants.HttpHeaders.QueryMetrics];\n    const toBeMergedHeaderQueryMetrics = toBeMergedHeaders[Constants.HttpHeaders.QueryMetrics];\n\n    for (const partitionId in toBeMergedHeaderQueryMetrics) {\n      if (headerQueryMetrics[partitionId]) {\n        const combinedQueryMetrics = headerQueryMetrics[partitionId].add([\n          toBeMergedHeaderQueryMetrics[partitionId],\n        ]);\n        headerQueryMetrics[partitionId] = combinedQueryMetrics;\n      } else {\n        headerQueryMetrics[partitionId] = toBeMergedHeaderQueryMetrics[partitionId];\n      }\n    }\n  }\n\n  if (Constants.HttpHeaders.IndexUtilization in toBeMergedHeaders) {\n    headers[Constants.HttpHeaders.IndexUtilization] =\n      toBeMergedHeaders[Constants.HttpHeaders.IndexUtilization];\n  }\n}\n"]}