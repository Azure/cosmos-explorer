{"version":3,"file":"FeedResponse.js","sourceRoot":"","sources":["../../../src/request/FeedResponse.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAClC,OAAO,EAAE,SAAS,EAAE,MAAM,WAAW,CAAC;AACtC,OAAO,EAAiB,qBAAqB,EAAE,MAAM,sCAAsC,CAAC;AAC5F,OAAO,EAAE,iBAAiB,EAAE,oBAAoB,EAAE,MAAM,iBAAiB,CAAC;AAG1E,MAAM,OAAO,YAAY;IACvB,YACkB,SAAsB,EACrB,OAAsB,EACvB,cAAuB,EACvB,WAA8B;QAH9B,cAAS,GAAT,SAAS,CAAa;QACrB,YAAO,GAAP,OAAO,CAAe;QACvB,mBAAc,GAAd,cAAc,CAAS;QACvB,gBAAW,GAAX,WAAW,CAAmB;IAC7C,CAAC;IAEJ,IAAW,YAAY;QACrB,OAAO,IAAI,CAAC,iBAAiB,CAAC;IAChC,CAAC;IACD,IAAW,iBAAiB;QAC1B,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;IAC1D,CAAC;IACD,IAAW,YAAY;QACrB,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;IAC1D,CAAC;IACD,IAAW,aAAa;QACtB,OAAO,qBAAqB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC7C,CAAC;IACD,IAAW,UAAU;QACnB,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;IACxD,CAAC;IACD,IAAW,YAAY;QACrB,MAAM,MAAM,GAAG,IAAI,iBAAiB,EAAE,CAAC;QACvC,MAAM,oBAAoB,GAAG,oBAAoB,CAAC,gBAAgB,CAChE,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,gBAAgB,CAAC,EACpD,IAAI,CACL,CAAC;QACF,OAAO,MAAM,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,CAAC;IACxD,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { Constants } from \"../common\";\nimport { CosmosHeaders, getRequestChargeIfAny } from \"../queryExecutionContext/headerUtils\";\nimport { IndexMetricWriter, IndexUtilizationInfo } from \"../indexMetrics\";\nimport { CosmosDiagnostics } from \"../CosmosDiagnostics\";\n\nexport class FeedResponse<TResource> {\n  constructor(\n    public readonly resources: TResource[],\n    private readonly headers: CosmosHeaders,\n    public readonly hasMoreResults: boolean,\n    public readonly diagnostics: CosmosDiagnostics,\n  ) {}\n\n  public get continuation(): string {\n    return this.continuationToken;\n  }\n  public get continuationToken(): string {\n    return this.headers[Constants.HttpHeaders.Continuation];\n  }\n  public get queryMetrics(): string {\n    return this.headers[Constants.HttpHeaders.QueryMetrics];\n  }\n  public get requestCharge(): number {\n    return getRequestChargeIfAny(this.headers);\n  }\n  public get activityId(): string {\n    return this.headers[Constants.HttpHeaders.ActivityId];\n  }\n  public get indexMetrics(): string {\n    const writer = new IndexMetricWriter();\n    const indexUtilizationInfo = IndexUtilizationInfo.createFromString(\n      this.headers[Constants.HttpHeaders.IndexUtilization],\n      true,\n    );\n    return writer.writeIndexMetrics(indexUtilizationInfo);\n  }\n}\n"]}