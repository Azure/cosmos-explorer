{"version":3,"file":"RequestHandler.js","sourceRoot":"","sources":["../../../src/request/RequestHandler.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { AbortController } from \"node-abort-controller\";\nimport {\n  createPipelineRequest,\n  createHttpHeaders,\n  PipelineResponse,\n} from \"@azure/core-rest-pipeline\";\nimport { prepareURL } from \"../common\";\nimport { Constants } from \"../common/constants\";\nimport { executePlugins, PluginOn } from \"../plugins/Plugin\";\nimport * as RetryUtility from \"../retry/retryUtility\";\nimport { defaultHttpAgent, defaultHttpsAgent } from \"./defaultAgent\";\nimport { ErrorResponse } from \"./ErrorResponse\";\nimport { bodyFromData } from \"./request\";\nimport { RequestContext } from \"./RequestContext\";\nimport { Response as CosmosResponse } from \"./Response\";\nimport { TimeoutError } from \"./TimeoutError\";\nimport { getCachedDefaultHttpClient } from \"../utils/cachedClient\";\nimport { AzureLogger, createClientLogger } from \"@azure/logger\";\nimport { DiagnosticNodeInternal, DiagnosticNodeType } from \"../diagnostics/DiagnosticNodeInternal\";\nimport { addDignosticChild } from \"../utils/diagnostics\";\nimport { getCurrentTimestampInMs } from \"../utils/time\";\n\nconst logger: AzureLogger = createClientLogger(\"RequestHandler\");\n\nasync function executeRequest(\n  diagnosticNode: DiagnosticNodeInternal,\n  requestContext: RequestContext,\n): Promise<CosmosResponse<any>> {\n  return executePlugins(diagnosticNode, requestContext, httpRequest, PluginOn.request);\n}\n\n/**\n * @hidden\n */\nasync function httpRequest(\n  requestContext: RequestContext,\n  diagnosticNode: DiagnosticNodeInternal,\n): Promise<{\n  headers: any;\n  result: any;\n  code: number;\n  substatus: number;\n}> {\n  const controller = new AbortController();\n  const signal = controller.signal;\n\n  // Wrap users passed abort events and call our own internal abort()\n  const userSignal = requestContext.options && requestContext.options.abortSignal;\n  if (userSignal) {\n    if (userSignal.aborted) {\n      controller.abort();\n    } else {\n      userSignal.addEventListener(\"abort\", () => {\n        controller.abort();\n      });\n    }\n  }\n\n  const timeout = setTimeout(() => {\n    controller.abort();\n  }, requestContext.connectionPolicy.requestTimeout);\n\n  let response: PipelineResponse;\n\n  if (requestContext.body) {\n    requestContext.body = bodyFromData(requestContext.body);\n  }\n\n  const httpsClient = getCachedDefaultHttpClient();\n  const url = prepareURL(requestContext.endpoint, requestContext.path);\n  const reqHeaders = createHttpHeaders(requestContext.headers as any);\n  const pipelineRequest = createPipelineRequest({\n    url,\n    headers: reqHeaders,\n    method: requestContext.method,\n    abortSignal: signal,\n    body: requestContext.body,\n  });\n  if (requestContext.requestAgent) {\n    pipelineRequest.agent = requestContext.requestAgent;\n  } else {\n    const parsedUrl = new URL(url);\n    pipelineRequest.agent = parsedUrl.protocol === \"http\" ? defaultHttpAgent : defaultHttpsAgent;\n  }\n\n  const startTimeUTCInMs = getCurrentTimestampInMs();\n  try {\n    if (requestContext.pipeline) {\n      response = await requestContext.pipeline.sendRequest(httpsClient, pipelineRequest);\n    } else {\n      response = await httpsClient.sendRequest(pipelineRequest);\n    }\n  } catch (error: any) {\n    if (error.name === \"AbortError\") {\n      // If the user passed signal caused the abort, cancel the timeout and rethrow the error\n      if (userSignal && userSignal.aborted === true) {\n        clearTimeout(timeout);\n        throw error;\n      }\n      // If the user didn't cancel, it must be an abort we called due to timeout\n      throw new TimeoutError(\n        `Timeout Error! Request took more than ${requestContext.connectionPolicy.requestTimeout} ms`,\n      );\n    }\n    throw error;\n  }\n\n  clearTimeout(timeout);\n  const result =\n    response.status === 204 || response.status === 304 || response.bodyAsText === \"\"\n      ? null\n      : JSON.parse(response.bodyAsText);\n  const responseHeaders = response.headers.toJSON();\n\n  const substatus = responseHeaders[Constants.HttpHeaders.SubStatus]\n    ? parseInt(responseHeaders[Constants.HttpHeaders.SubStatus], 10)\n    : undefined;\n\n  diagnosticNode.recordSuccessfulNetworkCall(\n    startTimeUTCInMs,\n    requestContext,\n    response,\n    substatus,\n    url,\n  );\n\n  if (response.status >= 400) {\n    const errorResponse: ErrorResponse = new ErrorResponse(result.message);\n    logger.warning(\n      response.status +\n        \" \" +\n        requestContext.endpoint +\n        \" \" +\n        requestContext.path +\n        \" \" +\n        result.message,\n    );\n\n    errorResponse.code = response.status;\n    errorResponse.body = result;\n    errorResponse.headers = responseHeaders;\n\n    if (Constants.HttpHeaders.ActivityId in responseHeaders) {\n      errorResponse.activityId = responseHeaders[Constants.HttpHeaders.ActivityId];\n    }\n\n    if (Constants.HttpHeaders.SubStatus in responseHeaders) {\n      errorResponse.substatus = substatus;\n    }\n\n    if (Constants.HttpHeaders.RetryAfterInMs in responseHeaders) {\n      errorResponse.retryAfterInMs = parseInt(\n        responseHeaders[Constants.HttpHeaders.RetryAfterInMs],\n        10,\n      );\n      Object.defineProperty(errorResponse, \"retryAfterInMilliseconds\", {\n        get: () => {\n          return errorResponse.retryAfterInMs;\n        },\n      });\n    }\n\n    throw errorResponse;\n  }\n  return {\n    headers: responseHeaders,\n    result,\n    code: response.status,\n    substatus,\n  };\n}\n\n/**\n * @hidden\n */\nasync function request<T>(\n  requestContext: RequestContext,\n  diagnosticNode: DiagnosticNodeInternal,\n): Promise<CosmosResponse<T>> {\n  if (requestContext.body) {\n    requestContext.body = bodyFromData(requestContext.body);\n    if (!requestContext.body) {\n      throw new Error(\"parameter data must be a javascript object, string, or Buffer\");\n    }\n  }\n\n  return addDignosticChild(\n    async (childNode: DiagnosticNodeInternal) => {\n      return RetryUtility.execute({\n        diagnosticNode: childNode,\n        requestContext,\n        executeRequest,\n      });\n    },\n    diagnosticNode,\n    DiagnosticNodeType.REQUEST_ATTEMPTS,\n  );\n}\n\nexport const RequestHandler = {\n  request,\n};\n"]}