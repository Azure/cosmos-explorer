{"version":3,"file":"retryUtility.js","sourceRoot":"","sources":["../../../src/retry/retryUtility.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { Constants } from \"../common/constants\";\nimport { sleep } from \"../common/helper\";\nimport { StatusCodes, SubStatusCodes } from \"../common/statusCodes\";\nimport { DiagnosticNodeInternal, DiagnosticNodeType } from \"../diagnostics/DiagnosticNodeInternal\";\nimport { Response } from \"../request\";\nimport { RequestContext } from \"../request/RequestContext\";\nimport { TimeoutErrorCode } from \"../request/TimeoutError\";\nimport { addDignosticChild } from \"../utils/diagnostics\";\nimport { getCurrentTimestampInMs } from \"../utils/time\";\nimport { DefaultRetryPolicy } from \"./defaultRetryPolicy\";\nimport { EndpointDiscoveryRetryPolicy } from \"./endpointDiscoveryRetryPolicy\";\nimport { ResourceThrottleRetryPolicy } from \"./resourceThrottleRetryPolicy\";\nimport { RetryContext } from \"./RetryContext\";\nimport { RetryPolicy } from \"./RetryPolicy\";\nimport { SessionRetryPolicy } from \"./sessionRetryPolicy\";\nimport { TimeoutFailoverRetryPolicy } from \"./timeoutFailoverRetryPolicy\";\n\n/**\n * @hidden\n */\ninterface ExecuteArgs {\n  retryContext?: RetryContext;\n  diagnosticNode: DiagnosticNodeInternal;\n  retryPolicies?: RetryPolicies;\n  requestContext: RequestContext;\n  executeRequest: (\n    diagnosticNode: DiagnosticNodeInternal,\n    requestContext: RequestContext,\n  ) => Promise<Response<any>>;\n}\n\n/**\n * @hidden\n */\ninterface RetryPolicies {\n  endpointDiscoveryRetryPolicy: EndpointDiscoveryRetryPolicy;\n  resourceThrottleRetryPolicy: ResourceThrottleRetryPolicy;\n  sessionReadRetryPolicy: SessionRetryPolicy;\n  defaultRetryPolicy: DefaultRetryPolicy;\n  timeoutFailoverRetryPolicy: TimeoutFailoverRetryPolicy;\n}\n\n/**\n * @hidden\n */\nexport async function execute({\n  diagnosticNode,\n  retryContext = { retryCount: 0 },\n  retryPolicies,\n  requestContext,\n  executeRequest,\n}: ExecuteArgs): Promise<Response<any>> {\n  // TODO: any response\n  return addDignosticChild(\n    async (localDiagnosticNode: DiagnosticNodeInternal) => {\n      localDiagnosticNode.addData({ requestAttempNumber: retryContext.retryCount });\n      if (!retryPolicies) {\n        retryPolicies = {\n          endpointDiscoveryRetryPolicy: new EndpointDiscoveryRetryPolicy(\n            requestContext.globalEndpointManager,\n            requestContext.operationType,\n          ),\n          resourceThrottleRetryPolicy: new ResourceThrottleRetryPolicy(\n            requestContext.connectionPolicy.retryOptions.maxRetryAttemptCount,\n            requestContext.connectionPolicy.retryOptions.fixedRetryIntervalInMilliseconds,\n            requestContext.connectionPolicy.retryOptions.maxWaitTimeInSeconds,\n          ),\n          sessionReadRetryPolicy: new SessionRetryPolicy(\n            requestContext.globalEndpointManager,\n            requestContext.resourceType,\n            requestContext.operationType,\n            requestContext.connectionPolicy,\n          ),\n          defaultRetryPolicy: new DefaultRetryPolicy(requestContext.operationType),\n          timeoutFailoverRetryPolicy: new TimeoutFailoverRetryPolicy(\n            requestContext.globalEndpointManager,\n            requestContext.headers,\n            requestContext.method,\n            requestContext.resourceType,\n            requestContext.operationType,\n            requestContext.connectionPolicy.enableEndpointDiscovery,\n          ),\n        };\n      }\n      if (retryContext && retryContext.clearSessionTokenNotAvailable) {\n        requestContext.client.clearSessionToken(requestContext.path);\n        delete requestContext.headers[\"x-ms-session-token\"];\n      }\n      if (retryContext && retryContext.retryLocationServerIndex) {\n        requestContext.endpoint = await requestContext.globalEndpointManager.resolveServiceEndpoint(\n          localDiagnosticNode,\n          requestContext.resourceType,\n          requestContext.operationType,\n          retryContext.retryLocationServerIndex,\n        );\n      } else {\n        requestContext.endpoint = await requestContext.globalEndpointManager.resolveServiceEndpoint(\n          localDiagnosticNode,\n          requestContext.resourceType,\n          requestContext.operationType,\n        );\n      }\n      const startTimeUTCInMs = getCurrentTimestampInMs();\n      try {\n        const response = await executeRequest(localDiagnosticNode, requestContext);\n        response.headers[Constants.ThrottleRetryCount] =\n          retryPolicies.resourceThrottleRetryPolicy.currentRetryAttemptCount;\n        response.headers[Constants.ThrottleRetryWaitTimeInMs] =\n          retryPolicies.resourceThrottleRetryPolicy.cummulativeWaitTimeinMs;\n        return response;\n      } catch (err: any) {\n        // TODO: any error\n        let retryPolicy: RetryPolicy = null;\n        const headers = err.headers || {};\n        if (\n          err.code === StatusCodes.ENOTFOUND ||\n          err.code === \"REQUEST_SEND_ERROR\" ||\n          (err.code === StatusCodes.Forbidden &&\n            (err.substatus === SubStatusCodes.DatabaseAccountNotFound ||\n              err.substatus === SubStatusCodes.WriteForbidden))\n        ) {\n          retryPolicy = retryPolicies.endpointDiscoveryRetryPolicy;\n        } else if (err.code === StatusCodes.TooManyRequests) {\n          retryPolicy = retryPolicies.resourceThrottleRetryPolicy;\n        } else if (\n          err.code === StatusCodes.NotFound &&\n          err.substatus === SubStatusCodes.ReadSessionNotAvailable\n        ) {\n          retryPolicy = retryPolicies.sessionReadRetryPolicy;\n        } else if (err.code === StatusCodes.ServiceUnavailable || err.code === TimeoutErrorCode) {\n          retryPolicy = retryPolicies.timeoutFailoverRetryPolicy;\n        } else {\n          retryPolicy = retryPolicies.defaultRetryPolicy;\n        }\n        const results = await retryPolicy.shouldRetry(\n          err,\n          localDiagnosticNode,\n          retryContext,\n          requestContext.endpoint,\n        );\n        if (!results) {\n          headers[Constants.ThrottleRetryCount] =\n            retryPolicies.resourceThrottleRetryPolicy.currentRetryAttemptCount;\n          headers[Constants.ThrottleRetryWaitTimeInMs] =\n            retryPolicies.resourceThrottleRetryPolicy.cummulativeWaitTimeinMs;\n          err.headers = { ...err.headers, ...headers };\n          throw err;\n        } else {\n          requestContext.retryCount++;\n          const newUrl = (results as any)[1]; // TODO: any hack\n          if (newUrl !== undefined) {\n            requestContext.endpoint = newUrl;\n          }\n          localDiagnosticNode.recordFailedNetworkCall(\n            startTimeUTCInMs,\n            requestContext,\n            retryContext.retryCount,\n            err.code,\n            err.subsstatusCode,\n            headers,\n          );\n          await sleep(retryPolicy.retryAfterInMs);\n          return execute({\n            diagnosticNode,\n            executeRequest,\n            requestContext,\n            retryContext,\n            retryPolicies,\n          });\n        }\n      }\n    },\n    diagnosticNode,\n    DiagnosticNodeType.HTTP_REQUEST,\n  );\n}\n"]}