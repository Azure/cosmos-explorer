// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ScaleComponent renders V2 throughput component 1`] = `
<Stack
  tokens={
    Object {
      "childrenGap": 20,
    }
  }
>
  <Stack
    tokens={
      Object {
        "childrenGap": 20,
      }
    }
  >
    <ThroughputInputComponent
      autoPilotTiersList={Array []}
      autoPilotUsageCost={
        <Text>
          Your 
          container
           throughput will automatically scale between 400 RU/s and 4,000 RU/s based on the workload needs, as long as your storage does not exceed 50GB. If your storage exceeds 50GB, we will upgrade the maximum (and minimum) throughput thresholds to the next available value. For more details, see
           
          <StyledLinkBase
            href="https://aka.ms/cosmos-autoscale-info"
            target="_blank"
          >
            documentation
          </StyledLinkBase>
          .
        </Text>
      }
      canExceedMaximumValue={false}
      getWarningMessage={[Function]}
      hasProvisioningTypeChanged={[Function]}
      isAutoPilotSelected={false}
      isEmulator={false}
      isEnabled={true}
      isFixed={false}
      label="Throughput (6,000 - 40,000 RU/s)"
      maximum={40000}
      minimum={6000}
      onAutoPilotSelected={[Function]}
      onAutoPilotTierChange={[Function]}
      onScaleDiscardableChange={[Function]}
      onScaleSaveableChange={[Function]}
      onThroughputChange={[Function]}
      requestUnitsUsageCost={<React.Fragment />}
      selectedAutoPilotTier={1}
      selectedAutoPilotTierBaseline={1}
      showAsMandatory={false}
      showAutoPilot={false}
      spendAckChecked={false}
      throughput={1000}
      throughputBaseline={1000}
    />
    <Stack
      tokens={
        Object {
          "childrenGap": 5,
        }
      }
    >
      <StyledLabelBase>
        Storage capacity
      </StyledLabelBase>
      <Text>
        Unlimited
      </Text>
    </Stack>
  </Stack>
</Stack>
`;

exports[`ScaleComponent renders V3 throughput component 1`] = `
<Stack
  tokens={
    Object {
      "childrenGap": 20,
    }
  }
>
  <Stack
    tokens={
      Object {
        "childrenGap": 20,
      }
    }
  >
    <ThroughputInputAutoPilotV3Component
      autoPilotUsageCost={
        <React.Fragment>
          <Text>
            Your 
            container
             throughput will automatically scale from
             
            <b>
              400
               RU/s (10% of max RU/s) -
               
              4000
               RU/s
            </b>
             
            based on usage.
            <br />
          </Text>
          <React.Fragment />
          <Text>
            After the first 
            40
             GB of data stored, the max RU/s will be automatically upgraded based on the new storage value.
            <StyledLinkBase
              href="https://aka.ms/cosmos-autoscale-info"
              target="_blank"
            >
               
              Learn more
            </StyledLinkBase>
            .
          </Text>
        </React.Fragment>
      }
      canExceedMaximumValue={false}
      getWarningMessage={[Function]}
      hasProvisioningTypeChanged={[Function]}
      isAutoPilotSelected={false}
      isEmulator={false}
      isEnabled={true}
      isFixed={false}
      label="Throughput (6,000 - 40,000 RU/s)"
      maxAutoPilotThroughput={4000}
      maxAutoPilotThroughputBaseline={4000}
      maximum={40000}
      minimum={6000}
      onAutoPilotSelected={[Function]}
      onMaxAutoPilotThroughputChange={[Function]}
      onScaleDiscardableChange={[Function]}
      onScaleSaveableChange={[Function]}
      onThroughputChange={[Function]}
      overrideWithAutoPilotSettings={true}
      overrideWithProvisionedThroughputSettings={false}
      requestUnitsUsageCost={<React.Fragment />}
      showAutoPilot={false}
      spendAckChecked={false}
      throughput={1000}
      throughputBaseline={1000}
    />
    <Stack
      tokens={
        Object {
          "childrenGap": 5,
        }
      }
    >
      <StyledLabelBase>
        Storage capacity
      </StyledLabelBase>
      <Text>
        Unlimited
      </Text>
    </Stack>
  </Stack>
</Stack>
`;
