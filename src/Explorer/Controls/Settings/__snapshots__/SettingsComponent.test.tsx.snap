// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SettingsComponent renders 1`] = `
<div
  className="settingsV2MainContainer"
>
  <div
    className="settingsV2TabsContainer"
  >
    <StyledPivot
      onLinkClick={[Function]}
      selectedKey="ScaleTab"
    >
      <PivotItem
        headerText="Scale"
        itemKey="ScaleTab"
        key="ScaleTab"
        style={
          Object {
            "marginTop": 20,
          }
        }
      >
        <ScaleComponent
          collection={
            Object {
              "analyticalStorageTtl": [Function],
              "changeFeedPolicy": [Function],
              "computedProperties": [Function],
              "conflictResolutionPolicy": [Function],
              "container": Explorer {
                "isFixedCollectionWithSharedThroughputSupported": [Function],
                "isTabsContentExpanded": [Function],
                "onRefreshDatabasesKeyPress": [Function],
                "onRefreshResourcesClick": [Function],
                "phoenixClient": PhoenixClient {
                  "armResourceId": undefined,
                  "retryOptions": Object {
                    "maxTimeout": 5000,
                    "minTimeout": 5000,
                    "retries": 3,
                  },
                },
                "provideFeedbackEmail": [Function],
                "queriesClient": QueriesClient {
                  "container": [Circular],
                },
                "resourceTree": ResourceTreeAdapter {
                  "container": [Circular],
                  "parameters": [Function],
                },
              },
              "databaseId": "test",
              "defaultTtl": [Function],
              "geospatialConfig": [Function],
              "getDatabase": [Function],
              "id": [Function],
              "indexingPolicy": [Function],
              "offer": [Function],
              "partitionKey": Object {
                "kind": "hash",
                "paths": Array [],
                "version": 2,
              },
              "partitionKeyProperties": Array [
                "partitionKey",
              ],
              "readSettings": [Function],
              "uniqueKeyPolicy": Object {},
              "usageSizeInKB": [Function],
            }
          }
          isAutoPilotSelected={false}
          isFixedContainer={false}
          onAutoPilotSelected={[Function]}
          onMaxAutoPilotThroughputChange={[Function]}
          onScaleDiscardableChange={[Function]}
          onScaleSaveableChange={[Function]}
          onThroughputChange={[Function]}
          throughput={10000}
          throughputBaseline={10000}
          wasAutopilotOriginallySet={false}
        />
      </PivotItem>
      <PivotItem
        headerText="Settings"
        itemKey="SubSettingsTab"
        key="SubSettingsTab"
        style={
          Object {
            "marginTop": 20,
          }
        }
      >
        <SubSettingsComponent
          changeFeedPolicy="Off"
          changeFeedPolicyBaseline="Off"
          changeFeedPolicyVisible={false}
          collection={
            Object {
              "analyticalStorageTtl": [Function],
              "changeFeedPolicy": [Function],
              "computedProperties": [Function],
              "conflictResolutionPolicy": [Function],
              "container": Explorer {
                "isFixedCollectionWithSharedThroughputSupported": [Function],
                "isTabsContentExpanded": [Function],
                "onRefreshDatabasesKeyPress": [Function],
                "onRefreshResourcesClick": [Function],
                "phoenixClient": PhoenixClient {
                  "armResourceId": undefined,
                  "retryOptions": Object {
                    "maxTimeout": 5000,
                    "minTimeout": 5000,
                    "retries": 3,
                  },
                },
                "provideFeedbackEmail": [Function],
                "queriesClient": QueriesClient {
                  "container": [Circular],
                },
                "resourceTree": ResourceTreeAdapter {
                  "container": [Circular],
                  "parameters": [Function],
                },
              },
              "databaseId": "test",
              "defaultTtl": [Function],
              "geospatialConfig": [Function],
              "getDatabase": [Function],
              "id": [Function],
              "indexingPolicy": [Function],
              "offer": [Function],
              "partitionKey": Object {
                "kind": "hash",
                "paths": Array [],
                "version": 2,
              },
              "partitionKeyProperties": Array [
                "partitionKey",
              ],
              "readSettings": [Function],
              "uniqueKeyPolicy": Object {},
              "usageSizeInKB": [Function],
            }
          }
          displayedTtlSeconds="5"
          geospatialConfigType="Geometry"
          geospatialConfigTypeBaseline="Geometry"
          isAnalyticalStorageEnabled={false}
          onAnalyticalStorageTtlSecondsChange={[Function]}
          onAnalyticalStorageTtlSelectionChange={[Function]}
          onChangeFeedPolicyChange={[Function]}
          onDisplayedTtlSecondsChange={[Function]}
          onGeoSpatialConfigTypeChange={[Function]}
          onSubSettingsDiscardableChange={[Function]}
          onSubSettingsSaveableChange={[Function]}
          onTimeToLiveSecondsChange={[Function]}
          onTtlChange={[Function]}
          timeToLive="on"
          timeToLiveBaseline="on"
          timeToLiveSeconds={5}
          timeToLiveSecondsBaseline={5}
        />
      </PivotItem>
      <PivotItem
        headerText="Indexing Policy"
        itemKey="IndexingPolicyTab"
        key="IndexingPolicyTab"
        style={
          Object {
            "marginTop": 20,
          }
        }
      >
        <IndexingPolicyComponent
          indexingPolicyContent={
            Object {
              "automatic": true,
              "excludedPaths": Array [],
              "includedPaths": Array [],
              "indexingMode": "consistent",
            }
          }
          indexingPolicyContentBaseline={
            Object {
              "automatic": true,
              "excludedPaths": Array [],
              "includedPaths": Array [],
              "indexingMode": "consistent",
            }
          }
          logIndexingPolicySuccessMessage={[Function]}
          onIndexingPolicyContentChange={[Function]}
          onIndexingPolicyDirtyChange={[Function]}
          refreshIndexTransformationProgress={[Function]}
          resetShouldDiscardIndexingPolicy={[Function]}
          shouldDiscardIndexingPolicy={false}
        />
      </PivotItem>
      <PivotItem
        headerText="Partition Keys (preview)"
        itemKey="PartitionKeyTab"
        key="PartitionKeyTab"
        style={
          Object {
            "marginTop": 20,
          }
        }
      >
        <PartitionKeyComponent
          collection={
            Object {
              "analyticalStorageTtl": [Function],
              "changeFeedPolicy": [Function],
              "computedProperties": [Function],
              "conflictResolutionPolicy": [Function],
              "container": Explorer {
                "isFixedCollectionWithSharedThroughputSupported": [Function],
                "isTabsContentExpanded": [Function],
                "onRefreshDatabasesKeyPress": [Function],
                "onRefreshResourcesClick": [Function],
                "phoenixClient": PhoenixClient {
                  "armResourceId": undefined,
                  "retryOptions": Object {
                    "maxTimeout": 5000,
                    "minTimeout": 5000,
                    "retries": 3,
                  },
                },
                "provideFeedbackEmail": [Function],
                "queriesClient": QueriesClient {
                  "container": [Circular],
                },
                "resourceTree": ResourceTreeAdapter {
                  "container": [Circular],
                  "parameters": [Function],
                },
              },
              "databaseId": "test",
              "defaultTtl": [Function],
              "geospatialConfig": [Function],
              "getDatabase": [Function],
              "id": [Function],
              "indexingPolicy": [Function],
              "offer": [Function],
              "partitionKey": Object {
                "kind": "hash",
                "paths": Array [],
                "version": 2,
              },
              "partitionKeyProperties": Array [
                "partitionKey",
              ],
              "readSettings": [Function],
              "uniqueKeyPolicy": Object {},
              "usageSizeInKB": [Function],
            }
          }
          explorer={
            Explorer {
              "isFixedCollectionWithSharedThroughputSupported": [Function],
              "isTabsContentExpanded": [Function],
              "onRefreshDatabasesKeyPress": [Function],
              "onRefreshResourcesClick": [Function],
              "phoenixClient": PhoenixClient {
                "armResourceId": undefined,
                "retryOptions": Object {
                  "maxTimeout": 5000,
                  "minTimeout": 5000,
                  "retries": 3,
                },
              },
              "provideFeedbackEmail": [Function],
              "queriesClient": QueriesClient {
                "container": [Circular],
              },
              "resourceTree": ResourceTreeAdapter {
                "container": [Circular],
                "parameters": [Function],
              },
            }
          }
        />
      </PivotItem>
      <PivotItem
        headerText="Computed Properties (preview)"
        itemKey="ComputedPropertiesTab"
        key="ComputedPropertiesTab"
        style={
          Object {
            "marginTop": 20,
          }
        }
      >
        <ComputedPropertiesComponent
          computedPropertiesContent={
            Array [
              Object {
                "name": "queryName",
                "query": "query",
              },
            ]
          }
          computedPropertiesContentBaseline={
            Array [
              Object {
                "name": "queryName",
                "query": "query",
              },
            ]
          }
          logComputedPropertiesSuccessMessage={[Function]}
          onComputedPropertiesContentChange={[Function]}
          onComputedPropertiesDirtyChange={[Function]}
          resetShouldDiscardComputedProperties={[Function]}
          shouldDiscardComputedProperties={false}
        />
      </PivotItem>
    </StyledPivot>
  </div>
</div>
`;
