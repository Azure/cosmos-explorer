// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SettingsComponent renders 1`] = `
<div
  className="settingsV2MainContainer"
>
  <div
    className="settingsV2TabsContainer"
  >
    <StyledPivot
      onLinkClick={[Function]}
      selectedKey="ScaleTab"
    >
      <PivotItem
        headerText="Scale"
        itemKey="ScaleTab"
        key="ScaleTab"
        style={
          Object {
            "marginTop": 20,
          }
        }
      >
        <ScaleComponent
          collection={
            Object {
              "analyticalStorageTtl": [Function],
              "changeFeedPolicy": [Function],
              "conflictResolutionPolicy": [Function],
              "container": Explorer {
                "_isInitializingNotebooks": false,
                "_resetNotebookWorkspace": [Function],
                "isAccountReady": [Function],
                "isFixedCollectionWithSharedThroughputSupported": [Function],
                "isNotebookEnabled": [Function],
                "isNotebooksEnabledForAccount": [Function],
                "isSchemaEnabled": [Function],
                "isShellEnabled": [Function],
                "isSynapseLinkUpdating": [Function],
                "isTabsContentExpanded": [Function],
                "memoryUsageInfo": [Function],
                "notebookBasePath": [Function],
                "notebookServerInfo": [Function],
                "onRefreshDatabasesKeyPress": [Function],
                "onRefreshResourcesClick": [Function],
                "provideFeedbackEmail": [Function],
                "queriesClient": QueriesClient {
                  "container": [Circular],
                },
                "refreshNotebookList": [Function],
                "resourceTree": ResourceTreeAdapter {
                  "container": [Circular],
                  "copyNotebook": [Function],
                  "parameters": [Function],
                },
                "resourceTreeForResourceToken": ResourceTreeAdapterForResourceToken {
                  "container": [Circular],
                  "parameters": [Function],
                },
                "sparkClusterConnectionInfo": [Function],
                "tabsManager": TabsManager {
                  "activeTab": [Function],
                  "openedTabs": [Function],
                },
              },
              "databaseId": "test",
              "defaultTtl": [Function],
              "geospatialConfig": [Function],
              "getDatabase": [Function],
              "id": [Function],
              "indexingPolicy": [Function],
              "offer": [Function],
              "partitionKey": Object {
                "kind": "hash",
                "paths": Array [],
                "version": 2,
              },
              "partitionKeyProperty": "partitionKey",
              "readSettings": [Function],
              "uniqueKeyPolicy": Object {},
              "usageSizeInKB": [Function],
            }
          }
          isAutoPilotSelected={false}
          isFixedContainer={false}
          onAutoPilotSelected={[Function]}
          onMaxAutoPilotThroughputChange={[Function]}
          onScaleDiscardableChange={[Function]}
          onScaleSaveableChange={[Function]}
          onThroughputChange={[Function]}
          throughput={10000}
          throughputBaseline={10000}
          wasAutopilotOriginallySet={false}
        />
      </PivotItem>
      <PivotItem
        headerText="Settings"
        itemKey="SubSettingsTab"
        key="SubSettingsTab"
        style={
          Object {
            "marginTop": 20,
          }
        }
      >
        <SubSettingsComponent
          changeFeedPolicy="Off"
          changeFeedPolicyBaseline="Off"
          changeFeedPolicyVisible={false}
          collection={
            Object {
              "analyticalStorageTtl": [Function],
              "changeFeedPolicy": [Function],
              "conflictResolutionPolicy": [Function],
              "container": Explorer {
                "_isInitializingNotebooks": false,
                "_resetNotebookWorkspace": [Function],
                "isAccountReady": [Function],
                "isFixedCollectionWithSharedThroughputSupported": [Function],
                "isNotebookEnabled": [Function],
                "isNotebooksEnabledForAccount": [Function],
                "isSchemaEnabled": [Function],
                "isShellEnabled": [Function],
                "isSynapseLinkUpdating": [Function],
                "isTabsContentExpanded": [Function],
                "memoryUsageInfo": [Function],
                "notebookBasePath": [Function],
                "notebookServerInfo": [Function],
                "onRefreshDatabasesKeyPress": [Function],
                "onRefreshResourcesClick": [Function],
                "provideFeedbackEmail": [Function],
                "queriesClient": QueriesClient {
                  "container": [Circular],
                },
                "refreshNotebookList": [Function],
                "resourceTree": ResourceTreeAdapter {
                  "container": [Circular],
                  "copyNotebook": [Function],
                  "parameters": [Function],
                },
                "resourceTreeForResourceToken": ResourceTreeAdapterForResourceToken {
                  "container": [Circular],
                  "parameters": [Function],
                },
                "sparkClusterConnectionInfo": [Function],
                "tabsManager": TabsManager {
                  "activeTab": [Function],
                  "openedTabs": [Function],
                },
              },
              "databaseId": "test",
              "defaultTtl": [Function],
              "geospatialConfig": [Function],
              "getDatabase": [Function],
              "id": [Function],
              "indexingPolicy": [Function],
              "offer": [Function],
              "partitionKey": Object {
                "kind": "hash",
                "paths": Array [],
                "version": 2,
              },
              "partitionKeyProperty": "partitionKey",
              "readSettings": [Function],
              "uniqueKeyPolicy": Object {},
              "usageSizeInKB": [Function],
            }
          }
          geospatialConfigType="Geometry"
          geospatialConfigTypeBaseline="Geometry"
          isAnalyticalStorageEnabled={false}
          onAnalyticalStorageTtlSecondsChange={[Function]}
          onAnalyticalStorageTtlSelectionChange={[Function]}
          onChangeFeedPolicyChange={[Function]}
          onGeoSpatialConfigTypeChange={[Function]}
          onSubSettingsDiscardableChange={[Function]}
          onSubSettingsSaveableChange={[Function]}
          onTimeToLiveSecondsChange={[Function]}
          onTtlChange={[Function]}
          timeToLive="on"
          timeToLiveBaseline="on"
          timeToLiveSeconds={5}
          timeToLiveSecondsBaseline={5}
        />
      </PivotItem>
      <PivotItem
        headerText="Indexing Policy"
        itemKey="IndexingPolicyTab"
        key="IndexingPolicyTab"
        style={
          Object {
            "marginTop": 20,
          }
        }
      >
        <IndexingPolicyComponent
          indexingPolicyContent={
            Object {
              "automatic": true,
              "excludedPaths": Array [],
              "includedPaths": Array [],
              "indexingMode": "consistent",
            }
          }
          indexingPolicyContentBaseline={
            Object {
              "automatic": true,
              "excludedPaths": Array [],
              "includedPaths": Array [],
              "indexingMode": "consistent",
            }
          }
          logIndexingPolicySuccessMessage={[Function]}
          onIndexingPolicyContentChange={[Function]}
          onIndexingPolicyDirtyChange={[Function]}
          refreshIndexTransformationProgress={[Function]}
          resetShouldDiscardIndexingPolicy={[Function]}
          shouldDiscardIndexingPolicy={false}
        />
      </PivotItem>
    </StyledPivot>
  </div>
</div>
`;
