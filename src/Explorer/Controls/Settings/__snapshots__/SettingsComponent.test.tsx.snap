// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SettingsComponent renders 1`] = `
<div
  className="tab-pane flexContainer"
  id="tabId"
  role="tabpanel"
>
  <div
    className="tabForm scaleSettingScrollable"
  >
    <AccessibleElement
      aria-controls="scaleRegion"
      aria-expanded={true}
      aria-label="Scale"
      as="div"
      className="scaleDivison"
      onActivated={[Function]}
      onClick={[Function]}
      role="button"
      tabIndex={0}
    >
      <span
        className="themed-images"
        id="ExpandChevronDownScale"
      >
        <img
          alt="Hide scale properties"
          className="imgiconwidth ssExpandCollapseIcon "
          src=""
        />
      </span>
      <span
        className="scaleSettingTitle"
      >
        Scale
      </span>
    </AccessibleElement>
    <div
      className="ssTextAllignment"
      id="scaleRegion"
    >
      <ThroughputInputAutoPilotV3Component
        ariaLabel="Throughput (400 - 10,000 RU/s)[object Object]"
        autoPilotUsageCost={
          <span>
            Your 
            container
             throughput will automatically scale from
             
            <b>
              400
               RU/s (10% of max RU/s) -
               
              4000
               RU/s
            </b>
             
            based on usage. 
            <br />
            <br />
            After the first 
            40
             GB of data stored, the max RU/s will be automatically upgraded based on the new storage value.
            <a
              href="https://aka.ms/cosmos-autoscale-info"
              rel="noreferrer"
              target="_blank"
            >
               
              Learn more
            </a>
            .
          </span>
        }
        canExceedMaximumValue={false}
        costsVisible={true}
        isAutoPilotSelected={false}
        isEnabled={true}
        label="Throughput (400 - 10,000 RU/s)"
        maxAutoPilotThroughput={
          Object {
            "baseline": 4000,
            "current": 4000,
            "isValid": true,
          }
        }
        maximum={10000}
        minimum={400}
        overrideWithAutoPilotSettings={false}
        overrideWithProvisionedThroughputSettings={false}
        requestUnitsUsageCost={<React.Fragment />}
        setAutoPilotSelected={[Function]}
        setMaxAutoPilotThroughput={[Function]}
        setThroughput={[Function]}
        showAutoPilot={true}
        testId="settingsThroughputValuetabId"
        throughput={
          Object {
            "baseline": undefined,
            "current": undefined,
            "isValid": true,
          }
        }
        throughputAutoPilotRadioId="editDatabaseThroughput-autoPilotRadiotabId"
        throughputModeRadioName="throughputModeRadiotabId"
        throughputProvisionedRadioId="editDatabaseThroughput-manualRadiotabId"
      />
      <div
        className="storageCapacityTitle throughputStorageValue"
      >
        <span>
          Storage capacity 
          <br />
          <b>
            Fixed
          </b>
        </span>
      </div>
    </div>
    <AccessibleElement
      aria-controls="settingsRegion"
      aria-expanded={true}
      aria-label="Settings"
      as="div"
      className="formTitle"
      onActivated={[Function]}
      onClick={[Function]}
      role="button"
      tabIndex={0}
    >
      <span
        className="themed-images"
        id="ExpandChevronDownSettings"
      >
        <img
          alt="Show settings"
          className="imgiconwidth ssExpandCollapseIcon"
          src=""
        />
      </span>
      <span
        className="scaleSettingTitle"
      >
        Settings
      </span>
    </AccessibleElement>
    <div
      className="ssTextAllignment"
      id="settingsRegion"
    >
      <div
        className="formTitle"
      >
        Time to Live
      </div>
      <div
        aria-label="Time to Live"
        className="tabs disableFocusDefaults"
        role="radiogroup"
      >
        <div
          className="tab"
        >
          <AccessibleElement
            aria-checked={false}
            aria-label="ttlOffLable"
            as="label"
            className="ttlIndexingPolicyFocusElement  unselectedRadio"
            onActivated={[Function]}
            onFocus={[Function]}
            role="radio"
            tabIndex={0}
          >
            Off
          </AccessibleElement>
          <input
            checked={false}
            className="radio"
            id="ttlOffIdtabId"
            name="ttl"
            onChange={[Function]}
            type="radio"
            value="off"
          />
        </div>
        <div
          className="tab"
        >
          <AccessibleElement
            aria-checked="false"
            aria-label="ttlOnNoDefaultLabel"
            as="label"
            className="ttlIndexingPolicyFocusElement  unselectedRadio"
            onActivated={[Function]}
            onFocus={[Function]}
            role="radio"
            tabIndex={0}
          >
            On (no default)
          </AccessibleElement>
          <input
            checked={false}
            className="radio"
            id="ttlOnNoDefaulttabId"
            name="ttl"
            onChange={[Function]}
            type="radio"
            value="on-nodefault"
          />
        </div>
        <div
          className="tab"
        >
          <AccessibleElement
            aria-checked="true"
            aria-label="ttlOnLabel"
            as="label"
            className="ttlIndexingPolicyFocusElement  selectedRadio"
            onActivated={[Function]}
            onFocus={[Function]}
            role="radio"
            tabIndex={0}
          >
            On
          </AccessibleElement>
          <input
            checked={true}
            className="radio"
            id="ttlOntabId"
            name="ttl"
            onChange={[Function]}
            type="radio"
            value="on"
          />
        </div>
      </div>
      <input
        aria-label="Time to live in seconds"
        className="dirtyTextbox "
        disabled={false}
        max="2147483647"
        min="1"
        onChange={[Function]}
        required={true}
        type="number"
        value={5}
      />
       second(s)
      <div
        className="formTitle"
      >
        Analytical Storage Time to Live
      </div>
      <div
        aria-label="Analytical Storage Time to Live"
        className="tabs disableFocusDefaults"
        role="radiogroup"
      >
        <div
          className="tab"
        >
          <label
            className="disabledRadio"
            role="radio"
            tabIndex={0}
          >
            Off
          </label>
        </div>
        <div
          className="tab"
        >
          <AccessibleElement
            aria-checked="false"
            aria-label="AnalyticalStorageTtlOnNoDefaultLabel"
            as="label"
            className=" unselectedRadio"
            onActivated={[Function]}
            role="radio"
            tabIndex={0}
          >
            On (no default)
          </AccessibleElement>
          <input
            checked={false}
            className="radio"
            id="analyticalStorageTtlOnNoDefaultId"
            name="analyticalStorageTtl"
            onChange={[Function]}
            type="radio"
            value="on-nodefault"
          />
        </div>
        <div
          className="tab"
        >
          <AccessibleElement
            aria-checked="true"
            aria-label="AnalyticalStorageTtlOnLabel"
            as="label"
            className=" selectedRadio"
            onActivated={[Function]}
            role="radio"
            tabIndex={0}
          >
            On
          </AccessibleElement>
          <input
            checked={true}
            className="radio"
            id="analyticalStorageTtlOnId"
            name="analyticalStorageTtl"
            onChange={[Function]}
            type="radio"
            value="on"
          />
        </div>
      </div>
      <input
        aria-label="Time to live in seconds"
        className="dirtyTextbox "
        max="2147483647"
        min="1"
        onChange={[Function]}
        required={true}
        type="number"
        value={5}
      />
       second(s)
      <div
        className="formTitle"
      >
        Indexing Policy
      </div>
      <div
        className="indexingPolicyEditor ttlIndexingPolicyFocusElement"
        key="indexingPolicyEditorDiv"
        tabIndex={0}
      />
    </div>
  </div>
</div>
`;
