// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SettingsUtils functions render 1`] = `
<Fragment>
  <Stack>
    <Text
      style={
        {
          "fontWeight": 600,
        }
      }
    >
      Cost estimate*
    </Text>
    <Text
      style={
        {
          "fontWeight": 600,
          "marginTop": 15,
        }
      }
    >
      How we calculate this
    </Text>
    <Stack
      id="throughputSpendElement"
      style={
        {
          "marginTop": 5,
        }
      }
    >
      <span>
        2
         region
        <span>
          s
        </span>
      </span>
      <span>
        1000
         RU/s
      </span>
      <span>
        Â¥
        0.00051
        /RU
      </span>
    </Stack>
    <Text
      style={
        {
          "marginTop": 15,
        }
      }
    >
      <em>
        *
        This cost is an estimate and may vary based on the regions where your account is deployed and potential discounts applied to your account
      </em>
    </Text>
  </Stack>
  <Text
    id="manualToAutoscaleDisclaimerElement"
    styles={
      {
        "root": {
          "color": "windowtext",
          "fontSize": 14,
        },
      }
    }
  >
    The starting autoscale max RU/s will be determined by the system, based on the current manual throughput settings and storage of your resource. After autoscale has been enabled, you can change the max RU/s.
     
    <StyledLinkBase
      href="https://aka.ms/cosmos-autoscale-migration"
    >
      Learn more
    </StyledLinkBase>
  </Text>
  <Text
    styles={
      {
        "root": {
          "color": "windowtext",
          "fontSize": 14,
        },
      }
    }
  >
    The system will automatically delete items based on the TTL value (in seconds) you provide, without needing a delete operation explicitly issued by a client application. For more information see,
     
    <StyledLinkBase
      href="https://aka.ms/cosmos-db-ttl"
      target="_blank"
    >
      Time to Live (TTL) in Azure Cosmos DB
    </StyledLinkBase>
    .
  </Text>
  <Text
    id="updateThroughputDelayedApplyWarningMessage"
    styles={
      {
        "root": {
          "color": "windowtext",
          "fontSize": 14,
        },
      }
    }
  >
    You are about to request an increase in throughput beyond the pre-allocated capacity. This operation will take some time to complete.
  </Text>
  <Text
    styles={
      {
        "root": {
          "color": "windowtext",
          "fontSize": 14,
        },
      }
    }
  >
    The request to increase the throughput has successfully been submitted. This operation will take 1-3 business days to complete. View the latest status in Notifications.
    <br />
    Database: 
    sampleDb
    , Container: 
    sampleCollection
     
    , Current manual throughput: 1000 RU/s, Target manual throughput: 2000
  </Text>
  <Text
    id="throughputApplyShortDelayMessage"
    styles={
      {
        "root": {
          "color": "windowtext",
          "fontSize": 14,
        },
      }
    }
  >
    A request to increase the throughput is currently in progress. This operation will take some time to complete.
    <br />
    Database: sampleDb, Container: sampleCollection 
    , Current manual throughput: 1000 RU/s
  </Text>
  <Text
    id="throughputApplyLongDelayMessage"
    styles={
      {
        "root": {
          "color": "windowtext",
          "fontSize": 14,
        },
      }
    }
  >
    A request to increase the throughput is currently in progress. This operation will take 1-3 business days to complete. View the latest status in Notifications.
    <br />
    Database: sampleDb, Container: sampleCollection 
    , Current manual throughput: 1000 RU/s, Target manual throughput: 2000
  </Text>
  <Text
    styles={
      {
        "root": {
          "color": "windowtext",
          "fontSize": 14,
        },
      }
    }
  >
    <span>
      Sample Text
    </span>
  </Text>
  <Text
    styles={
      {
        "root": {
          "color": "windowtext",
          "fontSize": 14,
        },
      }
    }
  >
    Gets or sets the name of a integer property in your documents which is used for the Last Write Wins (LWW) based conflict resolution scheme. By default, the system uses the system defined timestamp property, _ts to decide the winner for the conflicting versions of the document. Specify your own integer property if you want to override the default timestamp based conflict resolution.
  </Text>
  <Text
    styles={
      {
        "root": {
          "color": "windowtext",
          "fontSize": 14,
        },
      }
    }
  >
    Gets or sets the name of a stored procedure (aka merge procedure) for resolving the conflicts. You can write application defined logic to determine the winner of the conflicting versions of a document. The stored procedure will get executed transactionally, exactly once, on the server side. If you do not provide a stored procedure, the conflicts will be populated in the
    <StyledLinkBase
      className="linkDarkBackground"
      href="https://aka.ms/dataexplorerconflics"
      target="_blank"
    >
       conflicts feed
    </StyledLinkBase>
    . You can update/re-register the stored procedure at any time.
  </Text>
  <Text
    styles={
      {
        "root": {
          "color": "windowtext",
          "fontSize": 14,
        },
      }
    }
  >
    Enable change feed log retention policy to retain last 10 minutes of history for items in the container by default. To support this, the request unit (RU) charge for this container will be multiplied by a factor of two for writes. Reads are unaffected.
  </Text>
  <Text>
    For queries that filter on multiple properties, create multiple single field indexes instead of a compound index.
    <StyledLinkBase
      href="https://docs.microsoft.com/azure/cosmos-db/mongodb-indexing#index-types"
      target="_blank"
    >
       Compound indexes 
    </StyledLinkBase>
    are only used for sorting query results. If you need to add a compound index, you can create one using the Mongo shell.
  </Text>
  <StyledMessageBar
    messageBarType={1}
  >
    <Text>
      To use the indexing policy editor, please login to the
      <StyledLinkBase
        href="https://portal.azure.com"
        target="_blank"
      >
        azure portal.
      </StyledLinkBase>
    </Text>
  </StyledMessageBar>
  <Stack
    horizontal={true}
    tokens={
      {
        "childrenGap": 5,
      }
    }
  >
    <Text
      styles={
        {
          "root": {
            "color": "windowtext",
            "fontSize": 14,
          },
        }
      }
    >
      Refreshing index transformation progress
    </Text>
    <StyledSpinnerBase
      size={1}
    />
  </Stack>
  <Text
    styles={
      {
        "root": {
          "color": "windowtext",
          "fontSize": 14,
        },
      }
    }
  >
    You can make more indexing changes once the current index transformation is complete. 
    <StyledLinkBase
      onClick={[Function]}
    >
      Refresh to check if it has completed.
    </StyledLinkBase>
  </Text>
  <Text
    styles={
      {
        "root": {
          "color": "windowtext",
          "fontSize": 14,
        },
      }
    }
  >
    You can make more indexing changes once the current index transformation has completed. It is 90% complete. 
    <StyledLinkBase
      onClick={[Function]}
    >
      Refresh to check the progress.
    </StyledLinkBase>
  </Text>
</Fragment>
`;
