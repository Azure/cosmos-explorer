// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SettingsUtils functions render 1`] = `
<Fragment>
  <Text>
    Your 
    container
     throughput will automatically scale from
     
    <b>
      100
       RU/s (10% of max RU/s) -
       
      1000
       RU/s
    </b>
     
    based on usage.
    <br />
  </Text>
  <Text>
    After the first 
    10
     GB of data stored, the max RU/s will be automatically upgraded based on the new storage value.
    <StyledLinkBase
      href="https://aka.ms/cosmos-autoscale-info"
      target="_blank"
    >
       
      Learn more
    </StyledLinkBase>
    .
  </Text>
  <Text>
    Your 
    database
     throughput will automatically scale from
     
    <b>
      100
       RU/s (10% of max RU/s) -
       
      1000
       RU/s
    </b>
     
    based on usage.
    <br />
  </Text>
  <Text>
    After the first 
    10
     GB of data stored, the max RU/s will be automatically upgraded based on the new storage value.
    <StyledLinkBase
      href="https://aka.ms/cosmos-autoscale-info"
      target="_blank"
    >
       
      Learn more
    </StyledLinkBase>
    .
  </Text>
  <Text
    id="throughputSpendElement"
  >
    Estimated cost (
    RMB
    ):
     
    <b>
      ¥
      1.29
       hourly 
       / 
      ¥
      31.06
       daily 
       / 
      ¥
      944.60
       monthly
       
    </b>
    (
    regions: 
     
    2
    , 
    1000
    RU/s, 
    ¥
    0.00051
    /RU)
  </Text>
  <Text
    id="autoscaleSpendElement"
  >
    Estimated monthly cost (
    RMB
    ) is
     
    <b>
      ¥
      111.69
       - 
      ¥
      1116.90
       
    </b>
    (
    regions: 
     
    2
    , 
    100
     - 
    1000
     RU/s, 
    ¥
    0.000765
    /RU)
  </Text>
  <Text
    id="manualToAutoscaleDisclaimerElement"
    styles={
      Object {
        "root": Object {
          "fontSize": 12,
        },
      }
    }
  >
    The starting autoscale max RU/s will be determined by the system, based on the current manual throughput settings and storage of your resource. After autoscale has been enabled, you can change the max RU/s.
     
    <a
      href="https://aka.ms/cosmos-autoscale-migration"
    >
      Learn more
    </a>
  </Text>
  <Text
    styles={
      Object {
        "root": Object {
          "fontSize": 12,
        },
      }
    }
  >
    The system will automatically delete items based on the TTL value (in seconds) you provide, without needing a delete operation explicitly issued by a client application. For more information see,
     
    <StyledLinkBase
      href="https://aka.ms/cosmos-db-ttl"
      target="_blank"
    >
      Time to Live (TTL) in Azure Cosmos DB
    </StyledLinkBase>
    .
  </Text>
  <Text
    styles={
      Object {
        "root": Object {
          "fontSize": 12,
        },
      }
    }
  >
    Changing the Indexing Policy impacts query results while the index transformation occurs. When a change is made and the indexing mode is set to consistent or lazy, queries return eventual results until the operation completes. For more information see,
     
    <StyledLinkBase
      href="https://aka.ms/cosmosdb/modify-index-policy"
      target="_blank"
    >
      Modifying Indexing Policies
    </StyledLinkBase>
    .
  </Text>
  <Text
    id="updateThroughputBeyondLimitWarningMessage"
    styles={
      Object {
        "root": Object {
          "fontSize": 12,
        },
      }
    }
  >
    You are about to request an increase in throughput beyond the pre-allocated capacity. The service will scale out and increase throughput for the selected container. This operation will take 1-3 business days to complete. You can track the status of this request in Notifications.
  </Text>
  <Text
    id="updateThroughputDelayedApplyWarningMessage"
    styles={
      Object {
        "root": Object {
          "fontSize": 12,
        },
      }
    }
  >
    You are about to request an increase in throughput beyond the pre-allocated capacity. This operation will take some time to complete.
  </Text>
  <Text
    styles={
      Object {
        "root": Object {
          "fontSize": 12,
        },
      }
    }
  >
    The request to increase the throughput has successfully been submitted. This operation will take 1-3 business days to complete. View the latest status in Notifications.
    <br />
    Database: 
    sampleDb
    , Container: 
    sampleCollection
     
    , Current manual throughput: 1000 RU/s, Target manual throughput: 2000
  </Text>
  <Text
    id="throughputApplyShortDelayMessage"
    styles={
      Object {
        "root": Object {
          "fontSize": 12,
        },
      }
    }
  >
    A request to increase the throughput is currently in progress. This operation will take some time to complete.
    <br />
    Database: 
    sampleDb
    , Container: 
    sampleCollection
     
    , Current manual throughput: 1000 RU/s, Target manual throughput: 2000
  </Text>
  <Text
    id="throughputApplyLongDelayMessage"
    styles={
      Object {
        "root": Object {
          "fontSize": 12,
        },
      }
    }
  >
    A request to increase the throughput is currently in progress. This operation will take 1-3 business days to complete. View the latest status in Notifications.
    <br />
    Database: 
    sampleDb
    , Container: 
    sampleCollection
     
    , Current manual throughput: 1000 RU/s, Target manual throughput: 2000
  </Text>
  <Text
    styles={
      Object {
        "root": Object {
          "fontSize": 12,
        },
      }
    }
  >
    <span>
      Sample Text
    </span>
  </Text>
  <Text
    styles={
      Object {
        "root": Object {
          "fontSize": 12,
        },
      }
    }
  >
    Gets or sets the name of a integer property in your documents which is used for the Last Write Wins (LWW) based conflict resolution scheme. By default, the system uses the system defined timestamp property, _ts to decide the winner for the conflicting versions of the document. Specify your own integer property if you want to override the default timestamp based conflict resolution.
  </Text>
  <Text
    styles={
      Object {
        "root": Object {
          "fontSize": 12,
        },
      }
    }
  >
    Gets or sets the name of a stored procedure (aka merge procedure) for resolving the conflicts. You can write application defined logic to determine the winner of the conflicting versions of a document. The stored procedure will get executed transactionally, exactly once, on the server side. If you do not provide a stored procedure, the conflicts will be populated in the
    <StyledLinkBase
      className="linkDarkBackground"
      href="https://aka.ms/dataexplorerconflics"
      target="_blank"
    >
       conflicts feed
    </StyledLinkBase>
    . You can update/re-register the stored procedure at any time.
  </Text>
  <Text
    styles={
      Object {
        "root": Object {
          "fontSize": 12,
        },
      }
    }
  >
    Enable change feed log retention policy to retain last 10 minutes of history for items in the container by default. To support this, the request unit (RU) charge for this container will be multiplied by a factor of two for writes. Reads are unaffected.
  </Text>
  <Text>
    This indexing policy editor currently does not support compond indexes. if you need to add a compound index, please add it using a different method. Please refer to
    <StyledLinkBase
      href="https://docs.microsoft.com/en-us/azure/cosmos-db/mongodb-introduction"
      target="_blank"
    >
       documentation 
    </StyledLinkBase>
    for best practices of managing indexing.
  </Text>
  <div
    style={
      Object {
        "borderBottomColor": undefined,
        "borderBottomStyle": "solid",
        "borderBottomWidth": 1,
      }
    }
  />
</Fragment>
`;
