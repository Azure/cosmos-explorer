/* 
  AUTOGENERATED FILE
  Do not manually edit
  Run "npm run generateARMClients" to regenerate
*/

import * as Types from "./types";

export class MongoDBResourcesClient {
  private readonly baseUrl = "https://management.azure.com";
  private readonly basePath = `/subscriptions/${this.subscriptionId}/resourceGroups/${this.resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/${this.accountName}/mongodbDatabases`;

  constructor(
    private readonly subscriptionId: string,
    private readonly resourceGroupName: string,
    private readonly accountName: string
  ) {}

  /* Lists the MongoDB databases under an existing Azure Cosmos DB database account. */
  async listMongoDBDatabases(): Promise<Types.MongoDBDatabaseListResult> {
    const path = ``;
    return window.fetch(this.baseUrl + this.basePath + path, { method: "get" }).then(response => response.json());
  }

  /* Gets the MongoDB databases under an existing Azure Cosmos DB database account with the provided name. */
  async getMongoDBDatabase(databaseName: string): Promise<Types.MongoDBDatabaseGetResults> {
    const path = `/${databaseName}`;
    return window.fetch(this.baseUrl + this.basePath + path, { method: "get" }).then(response => response.json());
  }

  /* Create or updates Azure Cosmos DB MongoDB database */
  async createUpdateMongoDBDatabase(
    databaseName: string,
    body: Types.MongoDBDatabaseCreateUpdateParameters
  ): Promise<Types.MongoDBDatabaseGetResults | void> {
    const path = `/${databaseName}`;
    return window
      .fetch(this.baseUrl + this.basePath + path, { method: "put", body: JSON.stringify(body) })
      .then(response => response.json());
  }

  /* Deletes an existing Azure Cosmos DB MongoDB database. */
  async deleteMongoDBDatabase(databaseName: string): Promise<void | void> {
    const path = `/${databaseName}`;
    return window.fetch(this.baseUrl + this.basePath + path, { method: "delete" }).then(response => response.json());
  }

  /* Lists the MongoDB collection under an existing Azure Cosmos DB database account. */
  async listMongoDBCollections(databaseName: string): Promise<Types.MongoDBCollectionListResult> {
    const path = `/${databaseName}/collections`;
    return window.fetch(this.baseUrl + this.basePath + path, { method: "get" }).then(response => response.json());
  }

  /* Gets the MongoDB collection under an existing Azure Cosmos DB database account. */
  async getMongoDBCollection(databaseName: string, collectionName: string): Promise<Types.MongoDBCollectionGetResults> {
    const path = `/${databaseName}/collections/${collectionName}`;
    return window.fetch(this.baseUrl + this.basePath + path, { method: "get" }).then(response => response.json());
  }

  /* Create or update an Azure Cosmos DB MongoDB Collection */
  async createUpdateMongoDBCollection(
    databaseName: string,
    collectionName: string,
    body: Types.MongoDBCollectionCreateUpdateParameters
  ): Promise<Types.MongoDBCollectionGetResults | void> {
    const path = `/${databaseName}/collections/${collectionName}`;
    return window
      .fetch(this.baseUrl + this.basePath + path, { method: "put", body: JSON.stringify(body) })
      .then(response => response.json());
  }

  /* Deletes an existing Azure Cosmos DB MongoDB Collection. */
  async deleteMongoDBCollection(databaseName: string, collectionName: string): Promise<void | void> {
    const path = `/${databaseName}/collections/${collectionName}`;
    return window.fetch(this.baseUrl + this.basePath + path, { method: "delete" }).then(response => response.json());
  }

  /* Gets the RUs per second of the MongoDB collection under an existing Azure Cosmos DB database account with the provided name. */
  async getMongoDBCollectionThroughput(
    databaseName: string,
    collectionName: string
  ): Promise<Types.ThroughputSettingsGetResults> {
    const path = `/${databaseName}/collections/${collectionName}/throughputSettings/default`;
    return window.fetch(this.baseUrl + this.basePath + path, { method: "get" }).then(response => response.json());
  }

  /* Update the RUs per second of an Azure Cosmos DB MongoDB collection */
  async updateMongoDBCollectionThroughput(
    databaseName: string,
    collectionName: string,
    body: Types.ThroughputSettingsUpdateParameters
  ): Promise<Types.ThroughputSettingsGetResults | void> {
    const path = `/${databaseName}/collections/${collectionName}/throughputSettings/default`;
    return window
      .fetch(this.baseUrl + this.basePath + path, { method: "put", body: JSON.stringify(body) })
      .then(response => response.json());
  }

  /* Gets the RUs per second of the MongoDB database under an existing Azure Cosmos DB database account with the provided name. */
  async getMongoDBDatabaseThroughput(databaseName: string): Promise<Types.ThroughputSettingsGetResults> {
    const path = `/${databaseName}/throughputSettings/default`;
    return window.fetch(this.baseUrl + this.basePath + path, { method: "get" }).then(response => response.json());
  }

  /* Update RUs per second of the an Azure Cosmos DB MongoDB database */
  async updateMongoDBDatabaseThroughput(
    databaseName: string,
    body: Types.ThroughputSettingsUpdateParameters
  ): Promise<Types.ThroughputSettingsGetResults | void> {
    const path = `/${databaseName}/throughputSettings/default`;
    return window
      .fetch(this.baseUrl + this.basePath + path, { method: "put", body: JSON.stringify(body) })
      .then(response => response.json());
  }
}
