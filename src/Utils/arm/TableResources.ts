/* 
  AUTOGENERATED FILE
  Do not manually edit
  Run "npm run generateARMClients" to regenerate
*/

import * as Types from "./types";

export class TableResourcesClient {
  private readonly baseUrl = "https://management.azure.com";
  private readonly basePath = `/subscriptions/${this.subscriptionId}/resourceGroups/${this.resourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/${this.accountName}/tables`;

  constructor(
    private readonly subscriptionId: string,
    private readonly resourceGroupName: string,
    private readonly accountName: string
  ) {}

  /* Lists the Tables under an existing Azure Cosmos DB database account. */
  async listTables(): Promise<Types.TableListResult> {
    const path = ``;
    return window.fetch(this.baseUrl + this.basePath + path, { method: "get" }).then(response => response.json());
  }

  /* Gets the Tables under an existing Azure Cosmos DB database account with the provided name. */
  async getTable(tableName: string): Promise<Types.TableGetResults> {
    const path = `/${tableName}`;
    return window.fetch(this.baseUrl + this.basePath + path, { method: "get" }).then(response => response.json());
  }

  /* Create or update an Azure Cosmos DB Table */
  async createUpdateTable(
    tableName: string,
    body: Types.TableCreateUpdateParameters
  ): Promise<Types.TableGetResults | void> {
    const path = `/${tableName}`;
    return window
      .fetch(this.baseUrl + this.basePath + path, { method: "put", body: JSON.stringify(body) })
      .then(response => response.json());
  }

  /* Deletes an existing Azure Cosmos DB Table. */
  async deleteTable(tableName: string): Promise<void | void> {
    const path = `/${tableName}`;
    return window.fetch(this.baseUrl + this.basePath + path, { method: "delete" }).then(response => response.json());
  }

  /* Gets the RUs per second of the Table under an existing Azure Cosmos DB database account with the provided name. */
  async getTableThroughput(tableName: string): Promise<Types.ThroughputSettingsGetResults> {
    const path = `/${tableName}/throughputSettings/default`;
    return window.fetch(this.baseUrl + this.basePath + path, { method: "get" }).then(response => response.json());
  }

  /* Update RUs per second of an Azure Cosmos DB Table */
  async updateTableThroughput(
    tableName: string,
    body: Types.ThroughputSettingsUpdateParameters
  ): Promise<Types.ThroughputSettingsGetResults | void> {
    const path = `/${tableName}/throughputSettings/default`;
    return window
      .fetch(this.baseUrl + this.basePath + path, { method: "put", body: JSON.stringify(body) })
      .then(response => response.json());
  }
}
